# 1 "main.s"
# 1 "<built-in>" 1
# 1 "main.s" 2
    ; Archivo: main.s
    ; Proyecto: Reloj Digital
    ; Dispositivo: PIC16F887
    ; Autor: Pablo Caal
    ; Compilador: pic-as (v2.30), MPLABX V5.40
    ; Programa: Reloj Digital con modo hora, fecha, temporizador y alarma
    ; Hardware: PORTA: Salida para LED's indicadores del modo seleccionado del reloj
    ; PORTB: Entrada digital para pulsadores a utilizar
    ; PORTC: Salida de 8 bits conecatada a seis displays de 7 segmentos
    ; PORTD: Salida de 6 bits para seleccionar al display activo
    ; Creado: 04 mar, 2022
    ; Última modificación: 22 mar, 2022

    PROCESSOR 16F887

# 1 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\xc.inc" 1 3






# 1 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\pic.inc" 1 3



# 1 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\pic_as_chip_select.inc" 1 3
# 2774 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\pic_as_chip_select.inc" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\proc\\pic16f887.inc" 1 3
# 48 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\proc\\pic16f887.inc" 3
INDF equ 0000h



TMR0 equ 0001h



PCL equ 0002h



STATUS equ 0003h

STATUS_C_POSN equ 0000h
STATUS_C_POSITION equ 0000h
STATUS_C_SIZE equ 0001h
STATUS_C_LENGTH equ 0001h
STATUS_C_MASK equ 0001h
STATUS_DC_POSN equ 0001h
STATUS_DC_POSITION equ 0001h
STATUS_DC_SIZE equ 0001h
STATUS_DC_LENGTH equ 0001h
STATUS_DC_MASK equ 0002h
STATUS_Z_POSN equ 0002h
STATUS_Z_POSITION equ 0002h
STATUS_Z_SIZE equ 0001h
STATUS_Z_LENGTH equ 0001h
STATUS_Z_MASK equ 0004h
STATUS_nPD_POSN equ 0003h
STATUS_nPD_POSITION equ 0003h
STATUS_nPD_SIZE equ 0001h
STATUS_nPD_LENGTH equ 0001h
STATUS_nPD_MASK equ 0008h
STATUS_nTO_POSN equ 0004h
STATUS_nTO_POSITION equ 0004h
STATUS_nTO_SIZE equ 0001h
STATUS_nTO_LENGTH equ 0001h
STATUS_nTO_MASK equ 0010h
STATUS_RP_POSN equ 0005h
STATUS_RP_POSITION equ 0005h
STATUS_RP_SIZE equ 0002h
STATUS_RP_LENGTH equ 0002h
STATUS_RP_MASK equ 0060h
STATUS_IRP_POSN equ 0007h
STATUS_IRP_POSITION equ 0007h
STATUS_IRP_SIZE equ 0001h
STATUS_IRP_LENGTH equ 0001h
STATUS_IRP_MASK equ 0080h
STATUS_RP0_POSN equ 0005h
STATUS_RP0_POSITION equ 0005h
STATUS_RP0_SIZE equ 0001h
STATUS_RP0_LENGTH equ 0001h
STATUS_RP0_MASK equ 0020h
STATUS_RP1_POSN equ 0006h
STATUS_RP1_POSITION equ 0006h
STATUS_RP1_SIZE equ 0001h
STATUS_RP1_LENGTH equ 0001h
STATUS_RP1_MASK equ 0040h
STATUS_CARRY_POSN equ 0000h
STATUS_CARRY_POSITION equ 0000h
STATUS_CARRY_SIZE equ 0001h
STATUS_CARRY_LENGTH equ 0001h
STATUS_CARRY_MASK equ 0001h
STATUS_ZERO_POSN equ 0002h
STATUS_ZERO_POSITION equ 0002h
STATUS_ZERO_SIZE equ 0001h
STATUS_ZERO_LENGTH equ 0001h
STATUS_ZERO_MASK equ 0004h



FSR equ 0004h



PORTA equ 0005h

PORTA_RA0_POSN equ 0000h
PORTA_RA0_POSITION equ 0000h
PORTA_RA0_SIZE equ 0001h
PORTA_RA0_LENGTH equ 0001h
PORTA_RA0_MASK equ 0001h
PORTA_RA1_POSN equ 0001h
PORTA_RA1_POSITION equ 0001h
PORTA_RA1_SIZE equ 0001h
PORTA_RA1_LENGTH equ 0001h
PORTA_RA1_MASK equ 0002h
PORTA_RA2_POSN equ 0002h
PORTA_RA2_POSITION equ 0002h
PORTA_RA2_SIZE equ 0001h
PORTA_RA2_LENGTH equ 0001h
PORTA_RA2_MASK equ 0004h
PORTA_RA3_POSN equ 0003h
PORTA_RA3_POSITION equ 0003h
PORTA_RA3_SIZE equ 0001h
PORTA_RA3_LENGTH equ 0001h
PORTA_RA3_MASK equ 0008h
PORTA_RA4_POSN equ 0004h
PORTA_RA4_POSITION equ 0004h
PORTA_RA4_SIZE equ 0001h
PORTA_RA4_LENGTH equ 0001h
PORTA_RA4_MASK equ 0010h
PORTA_RA5_POSN equ 0005h
PORTA_RA5_POSITION equ 0005h
PORTA_RA5_SIZE equ 0001h
PORTA_RA5_LENGTH equ 0001h
PORTA_RA5_MASK equ 0020h
PORTA_RA6_POSN equ 0006h
PORTA_RA6_POSITION equ 0006h
PORTA_RA6_SIZE equ 0001h
PORTA_RA6_LENGTH equ 0001h
PORTA_RA6_MASK equ 0040h
PORTA_RA7_POSN equ 0007h
PORTA_RA7_POSITION equ 0007h
PORTA_RA7_SIZE equ 0001h
PORTA_RA7_LENGTH equ 0001h
PORTA_RA7_MASK equ 0080h



PORTB equ 0006h

PORTB_RB0_POSN equ 0000h
PORTB_RB0_POSITION equ 0000h
PORTB_RB0_SIZE equ 0001h
PORTB_RB0_LENGTH equ 0001h
PORTB_RB0_MASK equ 0001h
PORTB_RB1_POSN equ 0001h
PORTB_RB1_POSITION equ 0001h
PORTB_RB1_SIZE equ 0001h
PORTB_RB1_LENGTH equ 0001h
PORTB_RB1_MASK equ 0002h
PORTB_RB2_POSN equ 0002h
PORTB_RB2_POSITION equ 0002h
PORTB_RB2_SIZE equ 0001h
PORTB_RB2_LENGTH equ 0001h
PORTB_RB2_MASK equ 0004h
PORTB_RB3_POSN equ 0003h
PORTB_RB3_POSITION equ 0003h
PORTB_RB3_SIZE equ 0001h
PORTB_RB3_LENGTH equ 0001h
PORTB_RB3_MASK equ 0008h
PORTB_RB4_POSN equ 0004h
PORTB_RB4_POSITION equ 0004h
PORTB_RB4_SIZE equ 0001h
PORTB_RB4_LENGTH equ 0001h
PORTB_RB4_MASK equ 0010h
PORTB_RB5_POSN equ 0005h
PORTB_RB5_POSITION equ 0005h
PORTB_RB5_SIZE equ 0001h
PORTB_RB5_LENGTH equ 0001h
PORTB_RB5_MASK equ 0020h
PORTB_RB6_POSN equ 0006h
PORTB_RB6_POSITION equ 0006h
PORTB_RB6_SIZE equ 0001h
PORTB_RB6_LENGTH equ 0001h
PORTB_RB6_MASK equ 0040h
PORTB_RB7_POSN equ 0007h
PORTB_RB7_POSITION equ 0007h
PORTB_RB7_SIZE equ 0001h
PORTB_RB7_LENGTH equ 0001h
PORTB_RB7_MASK equ 0080h



PORTC equ 0007h

PORTC_RC0_POSN equ 0000h
PORTC_RC0_POSITION equ 0000h
PORTC_RC0_SIZE equ 0001h
PORTC_RC0_LENGTH equ 0001h
PORTC_RC0_MASK equ 0001h
PORTC_RC1_POSN equ 0001h
PORTC_RC1_POSITION equ 0001h
PORTC_RC1_SIZE equ 0001h
PORTC_RC1_LENGTH equ 0001h
PORTC_RC1_MASK equ 0002h
PORTC_RC2_POSN equ 0002h
PORTC_RC2_POSITION equ 0002h
PORTC_RC2_SIZE equ 0001h
PORTC_RC2_LENGTH equ 0001h
PORTC_RC2_MASK equ 0004h
PORTC_RC3_POSN equ 0003h
PORTC_RC3_POSITION equ 0003h
PORTC_RC3_SIZE equ 0001h
PORTC_RC3_LENGTH equ 0001h
PORTC_RC3_MASK equ 0008h
PORTC_RC4_POSN equ 0004h
PORTC_RC4_POSITION equ 0004h
PORTC_RC4_SIZE equ 0001h
PORTC_RC4_LENGTH equ 0001h
PORTC_RC4_MASK equ 0010h
PORTC_RC5_POSN equ 0005h
PORTC_RC5_POSITION equ 0005h
PORTC_RC5_SIZE equ 0001h
PORTC_RC5_LENGTH equ 0001h
PORTC_RC5_MASK equ 0020h
PORTC_RC6_POSN equ 0006h
PORTC_RC6_POSITION equ 0006h
PORTC_RC6_SIZE equ 0001h
PORTC_RC6_LENGTH equ 0001h
PORTC_RC6_MASK equ 0040h
PORTC_RC7_POSN equ 0007h
PORTC_RC7_POSITION equ 0007h
PORTC_RC7_SIZE equ 0001h
PORTC_RC7_LENGTH equ 0001h
PORTC_RC7_MASK equ 0080h



PORTD equ 0008h

PORTD_RD0_POSN equ 0000h
PORTD_RD0_POSITION equ 0000h
PORTD_RD0_SIZE equ 0001h
PORTD_RD0_LENGTH equ 0001h
PORTD_RD0_MASK equ 0001h
PORTD_RD1_POSN equ 0001h
PORTD_RD1_POSITION equ 0001h
PORTD_RD1_SIZE equ 0001h
PORTD_RD1_LENGTH equ 0001h
PORTD_RD1_MASK equ 0002h
PORTD_RD2_POSN equ 0002h
PORTD_RD2_POSITION equ 0002h
PORTD_RD2_SIZE equ 0001h
PORTD_RD2_LENGTH equ 0001h
PORTD_RD2_MASK equ 0004h
PORTD_RD3_POSN equ 0003h
PORTD_RD3_POSITION equ 0003h
PORTD_RD3_SIZE equ 0001h
PORTD_RD3_LENGTH equ 0001h
PORTD_RD3_MASK equ 0008h
PORTD_RD4_POSN equ 0004h
PORTD_RD4_POSITION equ 0004h
PORTD_RD4_SIZE equ 0001h
PORTD_RD4_LENGTH equ 0001h
PORTD_RD4_MASK equ 0010h
PORTD_RD5_POSN equ 0005h
PORTD_RD5_POSITION equ 0005h
PORTD_RD5_SIZE equ 0001h
PORTD_RD5_LENGTH equ 0001h
PORTD_RD5_MASK equ 0020h
PORTD_RD6_POSN equ 0006h
PORTD_RD6_POSITION equ 0006h
PORTD_RD6_SIZE equ 0001h
PORTD_RD6_LENGTH equ 0001h
PORTD_RD6_MASK equ 0040h
PORTD_RD7_POSN equ 0007h
PORTD_RD7_POSITION equ 0007h
PORTD_RD7_SIZE equ 0001h
PORTD_RD7_LENGTH equ 0001h
PORTD_RD7_MASK equ 0080h



PORTE equ 0009h

PORTE_RE0_POSN equ 0000h
PORTE_RE0_POSITION equ 0000h
PORTE_RE0_SIZE equ 0001h
PORTE_RE0_LENGTH equ 0001h
PORTE_RE0_MASK equ 0001h
PORTE_RE1_POSN equ 0001h
PORTE_RE1_POSITION equ 0001h
PORTE_RE1_SIZE equ 0001h
PORTE_RE1_LENGTH equ 0001h
PORTE_RE1_MASK equ 0002h
PORTE_RE2_POSN equ 0002h
PORTE_RE2_POSITION equ 0002h
PORTE_RE2_SIZE equ 0001h
PORTE_RE2_LENGTH equ 0001h
PORTE_RE2_MASK equ 0004h
PORTE_RE3_POSN equ 0003h
PORTE_RE3_POSITION equ 0003h
PORTE_RE3_SIZE equ 0001h
PORTE_RE3_LENGTH equ 0001h
PORTE_RE3_MASK equ 0008h



PCLATH equ 000Ah



INTCON equ 000Bh

INTCON_RBIF_POSN equ 0000h
INTCON_RBIF_POSITION equ 0000h
INTCON_RBIF_SIZE equ 0001h
INTCON_RBIF_LENGTH equ 0001h
INTCON_RBIF_MASK equ 0001h
INTCON_INTF_POSN equ 0001h
INTCON_INTF_POSITION equ 0001h
INTCON_INTF_SIZE equ 0001h
INTCON_INTF_LENGTH equ 0001h
INTCON_INTF_MASK equ 0002h
INTCON_T0IF_POSN equ 0002h
INTCON_T0IF_POSITION equ 0002h
INTCON_T0IF_SIZE equ 0001h
INTCON_T0IF_LENGTH equ 0001h
INTCON_T0IF_MASK equ 0004h
INTCON_RBIE_POSN equ 0003h
INTCON_RBIE_POSITION equ 0003h
INTCON_RBIE_SIZE equ 0001h
INTCON_RBIE_LENGTH equ 0001h
INTCON_RBIE_MASK equ 0008h
INTCON_INTE_POSN equ 0004h
INTCON_INTE_POSITION equ 0004h
INTCON_INTE_SIZE equ 0001h
INTCON_INTE_LENGTH equ 0001h
INTCON_INTE_MASK equ 0010h
INTCON_T0IE_POSN equ 0005h
INTCON_T0IE_POSITION equ 0005h
INTCON_T0IE_SIZE equ 0001h
INTCON_T0IE_LENGTH equ 0001h
INTCON_T0IE_MASK equ 0020h
INTCON_PEIE_POSN equ 0006h
INTCON_PEIE_POSITION equ 0006h
INTCON_PEIE_SIZE equ 0001h
INTCON_PEIE_LENGTH equ 0001h
INTCON_PEIE_MASK equ 0040h
INTCON_GIE_POSN equ 0007h
INTCON_GIE_POSITION equ 0007h
INTCON_GIE_SIZE equ 0001h
INTCON_GIE_LENGTH equ 0001h
INTCON_GIE_MASK equ 0080h
INTCON_TMR0IF_POSN equ 0002h
INTCON_TMR0IF_POSITION equ 0002h
INTCON_TMR0IF_SIZE equ 0001h
INTCON_TMR0IF_LENGTH equ 0001h
INTCON_TMR0IF_MASK equ 0004h
INTCON_TMR0IE_POSN equ 0005h
INTCON_TMR0IE_POSITION equ 0005h
INTCON_TMR0IE_SIZE equ 0001h
INTCON_TMR0IE_LENGTH equ 0001h
INTCON_TMR0IE_MASK equ 0020h



PIR1 equ 000Ch

PIR1_TMR1IF_POSN equ 0000h
PIR1_TMR1IF_POSITION equ 0000h
PIR1_TMR1IF_SIZE equ 0001h
PIR1_TMR1IF_LENGTH equ 0001h
PIR1_TMR1IF_MASK equ 0001h
PIR1_TMR2IF_POSN equ 0001h
PIR1_TMR2IF_POSITION equ 0001h
PIR1_TMR2IF_SIZE equ 0001h
PIR1_TMR2IF_LENGTH equ 0001h
PIR1_TMR2IF_MASK equ 0002h
PIR1_CCP1IF_POSN equ 0002h
PIR1_CCP1IF_POSITION equ 0002h
PIR1_CCP1IF_SIZE equ 0001h
PIR1_CCP1IF_LENGTH equ 0001h
PIR1_CCP1IF_MASK equ 0004h
PIR1_SSPIF_POSN equ 0003h
PIR1_SSPIF_POSITION equ 0003h
PIR1_SSPIF_SIZE equ 0001h
PIR1_SSPIF_LENGTH equ 0001h
PIR1_SSPIF_MASK equ 0008h
PIR1_TXIF_POSN equ 0004h
PIR1_TXIF_POSITION equ 0004h
PIR1_TXIF_SIZE equ 0001h
PIR1_TXIF_LENGTH equ 0001h
PIR1_TXIF_MASK equ 0010h
PIR1_RCIF_POSN equ 0005h
PIR1_RCIF_POSITION equ 0005h
PIR1_RCIF_SIZE equ 0001h
PIR1_RCIF_LENGTH equ 0001h
PIR1_RCIF_MASK equ 0020h
PIR1_ADIF_POSN equ 0006h
PIR1_ADIF_POSITION equ 0006h
PIR1_ADIF_SIZE equ 0001h
PIR1_ADIF_LENGTH equ 0001h
PIR1_ADIF_MASK equ 0040h



PIR2 equ 000Dh

PIR2_CCP2IF_POSN equ 0000h
PIR2_CCP2IF_POSITION equ 0000h
PIR2_CCP2IF_SIZE equ 0001h
PIR2_CCP2IF_LENGTH equ 0001h
PIR2_CCP2IF_MASK equ 0001h
PIR2_ULPWUIF_POSN equ 0002h
PIR2_ULPWUIF_POSITION equ 0002h
PIR2_ULPWUIF_SIZE equ 0001h
PIR2_ULPWUIF_LENGTH equ 0001h
PIR2_ULPWUIF_MASK equ 0004h
PIR2_BCLIF_POSN equ 0003h
PIR2_BCLIF_POSITION equ 0003h
PIR2_BCLIF_SIZE equ 0001h
PIR2_BCLIF_LENGTH equ 0001h
PIR2_BCLIF_MASK equ 0008h
PIR2_EEIF_POSN equ 0004h
PIR2_EEIF_POSITION equ 0004h
PIR2_EEIF_SIZE equ 0001h
PIR2_EEIF_LENGTH equ 0001h
PIR2_EEIF_MASK equ 0010h
PIR2_C1IF_POSN equ 0005h
PIR2_C1IF_POSITION equ 0005h
PIR2_C1IF_SIZE equ 0001h
PIR2_C1IF_LENGTH equ 0001h
PIR2_C1IF_MASK equ 0020h
PIR2_C2IF_POSN equ 0006h
PIR2_C2IF_POSITION equ 0006h
PIR2_C2IF_SIZE equ 0001h
PIR2_C2IF_LENGTH equ 0001h
PIR2_C2IF_MASK equ 0040h
PIR2_OSFIF_POSN equ 0007h
PIR2_OSFIF_POSITION equ 0007h
PIR2_OSFIF_SIZE equ 0001h
PIR2_OSFIF_LENGTH equ 0001h
PIR2_OSFIF_MASK equ 0080h



TMR1L equ 000Eh



TMR1H equ 000Fh



T1CON equ 0010h

T1CON_TMR1ON_POSN equ 0000h
T1CON_TMR1ON_POSITION equ 0000h
T1CON_TMR1ON_SIZE equ 0001h
T1CON_TMR1ON_LENGTH equ 0001h
T1CON_TMR1ON_MASK equ 0001h
T1CON_TMR1CS_POSN equ 0001h
T1CON_TMR1CS_POSITION equ 0001h
T1CON_TMR1CS_SIZE equ 0001h
T1CON_TMR1CS_LENGTH equ 0001h
T1CON_TMR1CS_MASK equ 0002h
T1CON_nT1SYNC_POSN equ 0002h
T1CON_nT1SYNC_POSITION equ 0002h
T1CON_nT1SYNC_SIZE equ 0001h
T1CON_nT1SYNC_LENGTH equ 0001h
T1CON_nT1SYNC_MASK equ 0004h
T1CON_T1OSCEN_POSN equ 0003h
T1CON_T1OSCEN_POSITION equ 0003h
T1CON_T1OSCEN_SIZE equ 0001h
T1CON_T1OSCEN_LENGTH equ 0001h
T1CON_T1OSCEN_MASK equ 0008h
T1CON_T1CKPS_POSN equ 0004h
T1CON_T1CKPS_POSITION equ 0004h
T1CON_T1CKPS_SIZE equ 0002h
T1CON_T1CKPS_LENGTH equ 0002h
T1CON_T1CKPS_MASK equ 0030h
T1CON_TMR1GE_POSN equ 0006h
T1CON_TMR1GE_POSITION equ 0006h
T1CON_TMR1GE_SIZE equ 0001h
T1CON_TMR1GE_LENGTH equ 0001h
T1CON_TMR1GE_MASK equ 0040h
T1CON_T1GINV_POSN equ 0007h
T1CON_T1GINV_POSITION equ 0007h
T1CON_T1GINV_SIZE equ 0001h
T1CON_T1GINV_LENGTH equ 0001h
T1CON_T1GINV_MASK equ 0080h
T1CON_T1INSYNC_POSN equ 0002h
T1CON_T1INSYNC_POSITION equ 0002h
T1CON_T1INSYNC_SIZE equ 0001h
T1CON_T1INSYNC_LENGTH equ 0001h
T1CON_T1INSYNC_MASK equ 0004h
T1CON_T1CKPS0_POSN equ 0004h
T1CON_T1CKPS0_POSITION equ 0004h
T1CON_T1CKPS0_SIZE equ 0001h
T1CON_T1CKPS0_LENGTH equ 0001h
T1CON_T1CKPS0_MASK equ 0010h
T1CON_T1CKPS1_POSN equ 0005h
T1CON_T1CKPS1_POSITION equ 0005h
T1CON_T1CKPS1_SIZE equ 0001h
T1CON_T1CKPS1_LENGTH equ 0001h
T1CON_T1CKPS1_MASK equ 0020h
T1CON_T1GIV_POSN equ 0007h
T1CON_T1GIV_POSITION equ 0007h
T1CON_T1GIV_SIZE equ 0001h
T1CON_T1GIV_LENGTH equ 0001h
T1CON_T1GIV_MASK equ 0080h
T1CON_T1SYNC_POSN equ 0002h
T1CON_T1SYNC_POSITION equ 0002h
T1CON_T1SYNC_SIZE equ 0001h
T1CON_T1SYNC_LENGTH equ 0001h
T1CON_T1SYNC_MASK equ 0004h



TMR2 equ 0011h



T2CON equ 0012h

T2CON_T2CKPS_POSN equ 0000h
T2CON_T2CKPS_POSITION equ 0000h
T2CON_T2CKPS_SIZE equ 0002h
T2CON_T2CKPS_LENGTH equ 0002h
T2CON_T2CKPS_MASK equ 0003h
T2CON_TMR2ON_POSN equ 0002h
T2CON_TMR2ON_POSITION equ 0002h
T2CON_TMR2ON_SIZE equ 0001h
T2CON_TMR2ON_LENGTH equ 0001h
T2CON_TMR2ON_MASK equ 0004h
T2CON_TOUTPS_POSN equ 0003h
T2CON_TOUTPS_POSITION equ 0003h
T2CON_TOUTPS_SIZE equ 0004h
T2CON_TOUTPS_LENGTH equ 0004h
T2CON_TOUTPS_MASK equ 0078h
T2CON_T2CKPS0_POSN equ 0000h
T2CON_T2CKPS0_POSITION equ 0000h
T2CON_T2CKPS0_SIZE equ 0001h
T2CON_T2CKPS0_LENGTH equ 0001h
T2CON_T2CKPS0_MASK equ 0001h
T2CON_T2CKPS1_POSN equ 0001h
T2CON_T2CKPS1_POSITION equ 0001h
T2CON_T2CKPS1_SIZE equ 0001h
T2CON_T2CKPS1_LENGTH equ 0001h
T2CON_T2CKPS1_MASK equ 0002h
T2CON_TOUTPS0_POSN equ 0003h
T2CON_TOUTPS0_POSITION equ 0003h
T2CON_TOUTPS0_SIZE equ 0001h
T2CON_TOUTPS0_LENGTH equ 0001h
T2CON_TOUTPS0_MASK equ 0008h
T2CON_TOUTPS1_POSN equ 0004h
T2CON_TOUTPS1_POSITION equ 0004h
T2CON_TOUTPS1_SIZE equ 0001h
T2CON_TOUTPS1_LENGTH equ 0001h
T2CON_TOUTPS1_MASK equ 0010h
T2CON_TOUTPS2_POSN equ 0005h
T2CON_TOUTPS2_POSITION equ 0005h
T2CON_TOUTPS2_SIZE equ 0001h
T2CON_TOUTPS2_LENGTH equ 0001h
T2CON_TOUTPS2_MASK equ 0020h
T2CON_TOUTPS3_POSN equ 0006h
T2CON_TOUTPS3_POSITION equ 0006h
T2CON_TOUTPS3_SIZE equ 0001h
T2CON_TOUTPS3_LENGTH equ 0001h
T2CON_TOUTPS3_MASK equ 0040h



SSPBUF equ 0013h



SSPCON equ 0014h

SSPCON_SSPM_POSN equ 0000h
SSPCON_SSPM_POSITION equ 0000h
SSPCON_SSPM_SIZE equ 0004h
SSPCON_SSPM_LENGTH equ 0004h
SSPCON_SSPM_MASK equ 000Fh
SSPCON_CKP_POSN equ 0004h
SSPCON_CKP_POSITION equ 0004h
SSPCON_CKP_SIZE equ 0001h
SSPCON_CKP_LENGTH equ 0001h
SSPCON_CKP_MASK equ 0010h
SSPCON_SSPEN_POSN equ 0005h
SSPCON_SSPEN_POSITION equ 0005h
SSPCON_SSPEN_SIZE equ 0001h
SSPCON_SSPEN_LENGTH equ 0001h
SSPCON_SSPEN_MASK equ 0020h
SSPCON_SSPOV_POSN equ 0006h
SSPCON_SSPOV_POSITION equ 0006h
SSPCON_SSPOV_SIZE equ 0001h
SSPCON_SSPOV_LENGTH equ 0001h
SSPCON_SSPOV_MASK equ 0040h
SSPCON_WCOL_POSN equ 0007h
SSPCON_WCOL_POSITION equ 0007h
SSPCON_WCOL_SIZE equ 0001h
SSPCON_WCOL_LENGTH equ 0001h
SSPCON_WCOL_MASK equ 0080h
SSPCON_SSPM0_POSN equ 0000h
SSPCON_SSPM0_POSITION equ 0000h
SSPCON_SSPM0_SIZE equ 0001h
SSPCON_SSPM0_LENGTH equ 0001h
SSPCON_SSPM0_MASK equ 0001h
SSPCON_SSPM1_POSN equ 0001h
SSPCON_SSPM1_POSITION equ 0001h
SSPCON_SSPM1_SIZE equ 0001h
SSPCON_SSPM1_LENGTH equ 0001h
SSPCON_SSPM1_MASK equ 0002h
SSPCON_SSPM2_POSN equ 0002h
SSPCON_SSPM2_POSITION equ 0002h
SSPCON_SSPM2_SIZE equ 0001h
SSPCON_SSPM2_LENGTH equ 0001h
SSPCON_SSPM2_MASK equ 0004h
SSPCON_SSPM3_POSN equ 0003h
SSPCON_SSPM3_POSITION equ 0003h
SSPCON_SSPM3_SIZE equ 0001h
SSPCON_SSPM3_LENGTH equ 0001h
SSPCON_SSPM3_MASK equ 0008h



CCPR1L equ 0015h



CCPR1H equ 0016h



CCP1CON equ 0017h

CCP1CON_CCP1M_POSN equ 0000h
CCP1CON_CCP1M_POSITION equ 0000h
CCP1CON_CCP1M_SIZE equ 0004h
CCP1CON_CCP1M_LENGTH equ 0004h
CCP1CON_CCP1M_MASK equ 000Fh
CCP1CON_DC1B_POSN equ 0004h
CCP1CON_DC1B_POSITION equ 0004h
CCP1CON_DC1B_SIZE equ 0002h
CCP1CON_DC1B_LENGTH equ 0002h
CCP1CON_DC1B_MASK equ 0030h
CCP1CON_P1M_POSN equ 0006h
CCP1CON_P1M_POSITION equ 0006h
CCP1CON_P1M_SIZE equ 0002h
CCP1CON_P1M_LENGTH equ 0002h
CCP1CON_P1M_MASK equ 00C0h
CCP1CON_CCP1M0_POSN equ 0000h
CCP1CON_CCP1M0_POSITION equ 0000h
CCP1CON_CCP1M0_SIZE equ 0001h
CCP1CON_CCP1M0_LENGTH equ 0001h
CCP1CON_CCP1M0_MASK equ 0001h
CCP1CON_CCP1M1_POSN equ 0001h
CCP1CON_CCP1M1_POSITION equ 0001h
CCP1CON_CCP1M1_SIZE equ 0001h
CCP1CON_CCP1M1_LENGTH equ 0001h
CCP1CON_CCP1M1_MASK equ 0002h
CCP1CON_CCP1M2_POSN equ 0002h
CCP1CON_CCP1M2_POSITION equ 0002h
CCP1CON_CCP1M2_SIZE equ 0001h
CCP1CON_CCP1M2_LENGTH equ 0001h
CCP1CON_CCP1M2_MASK equ 0004h
CCP1CON_CCP1M3_POSN equ 0003h
CCP1CON_CCP1M3_POSITION equ 0003h
CCP1CON_CCP1M3_SIZE equ 0001h
CCP1CON_CCP1M3_LENGTH equ 0001h
CCP1CON_CCP1M3_MASK equ 0008h
CCP1CON_DC1B0_POSN equ 0004h
CCP1CON_DC1B0_POSITION equ 0004h
CCP1CON_DC1B0_SIZE equ 0001h
CCP1CON_DC1B0_LENGTH equ 0001h
CCP1CON_DC1B0_MASK equ 0010h
CCP1CON_DC1B1_POSN equ 0005h
CCP1CON_DC1B1_POSITION equ 0005h
CCP1CON_DC1B1_SIZE equ 0001h
CCP1CON_DC1B1_LENGTH equ 0001h
CCP1CON_DC1B1_MASK equ 0020h
CCP1CON_P1M0_POSN equ 0006h
CCP1CON_P1M0_POSITION equ 0006h
CCP1CON_P1M0_SIZE equ 0001h
CCP1CON_P1M0_LENGTH equ 0001h
CCP1CON_P1M0_MASK equ 0040h
CCP1CON_P1M1_POSN equ 0007h
CCP1CON_P1M1_POSITION equ 0007h
CCP1CON_P1M1_SIZE equ 0001h
CCP1CON_P1M1_LENGTH equ 0001h
CCP1CON_P1M1_MASK equ 0080h
CCP1CON_CCP1Y_POSN equ 0004h
CCP1CON_CCP1Y_POSITION equ 0004h
CCP1CON_CCP1Y_SIZE equ 0001h
CCP1CON_CCP1Y_LENGTH equ 0001h
CCP1CON_CCP1Y_MASK equ 0010h
CCP1CON_CCP1X_POSN equ 0005h
CCP1CON_CCP1X_POSITION equ 0005h
CCP1CON_CCP1X_SIZE equ 0001h
CCP1CON_CCP1X_LENGTH equ 0001h
CCP1CON_CCP1X_MASK equ 0020h



RCSTA equ 0018h

RCSTA_RX9D_POSN equ 0000h
RCSTA_RX9D_POSITION equ 0000h
RCSTA_RX9D_SIZE equ 0001h
RCSTA_RX9D_LENGTH equ 0001h
RCSTA_RX9D_MASK equ 0001h
RCSTA_OERR_POSN equ 0001h
RCSTA_OERR_POSITION equ 0001h
RCSTA_OERR_SIZE equ 0001h
RCSTA_OERR_LENGTH equ 0001h
RCSTA_OERR_MASK equ 0002h
RCSTA_FERR_POSN equ 0002h
RCSTA_FERR_POSITION equ 0002h
RCSTA_FERR_SIZE equ 0001h
RCSTA_FERR_LENGTH equ 0001h
RCSTA_FERR_MASK equ 0004h
RCSTA_ADDEN_POSN equ 0003h
RCSTA_ADDEN_POSITION equ 0003h
RCSTA_ADDEN_SIZE equ 0001h
RCSTA_ADDEN_LENGTH equ 0001h
RCSTA_ADDEN_MASK equ 0008h
RCSTA_CREN_POSN equ 0004h
RCSTA_CREN_POSITION equ 0004h
RCSTA_CREN_SIZE equ 0001h
RCSTA_CREN_LENGTH equ 0001h
RCSTA_CREN_MASK equ 0010h
RCSTA_SREN_POSN equ 0005h
RCSTA_SREN_POSITION equ 0005h
RCSTA_SREN_SIZE equ 0001h
RCSTA_SREN_LENGTH equ 0001h
RCSTA_SREN_MASK equ 0020h
RCSTA_RX9_POSN equ 0006h
RCSTA_RX9_POSITION equ 0006h
RCSTA_RX9_SIZE equ 0001h
RCSTA_RX9_LENGTH equ 0001h
RCSTA_RX9_MASK equ 0040h
RCSTA_SPEN_POSN equ 0007h
RCSTA_SPEN_POSITION equ 0007h
RCSTA_SPEN_SIZE equ 0001h
RCSTA_SPEN_LENGTH equ 0001h
RCSTA_SPEN_MASK equ 0080h
RCSTA_RCD8_POSN equ 0000h
RCSTA_RCD8_POSITION equ 0000h
RCSTA_RCD8_SIZE equ 0001h
RCSTA_RCD8_LENGTH equ 0001h
RCSTA_RCD8_MASK equ 0001h
RCSTA_RC9_POSN equ 0006h
RCSTA_RC9_POSITION equ 0006h
RCSTA_RC9_SIZE equ 0001h
RCSTA_RC9_LENGTH equ 0001h
RCSTA_RC9_MASK equ 0040h
RCSTA_nRC8_POSN equ 0006h
RCSTA_nRC8_POSITION equ 0006h
RCSTA_nRC8_SIZE equ 0001h
RCSTA_nRC8_LENGTH equ 0001h
RCSTA_nRC8_MASK equ 0040h
RCSTA_RC8_9_POSN equ 0006h
RCSTA_RC8_9_POSITION equ 0006h
RCSTA_RC8_9_SIZE equ 0001h
RCSTA_RC8_9_LENGTH equ 0001h
RCSTA_RC8_9_MASK equ 0040h



TXREG equ 0019h



RCREG equ 001Ah



CCPR2L equ 001Bh



CCPR2H equ 001Ch



CCP2CON equ 001Dh

CCP2CON_CCP2M_POSN equ 0000h
CCP2CON_CCP2M_POSITION equ 0000h
CCP2CON_CCP2M_SIZE equ 0004h
CCP2CON_CCP2M_LENGTH equ 0004h
CCP2CON_CCP2M_MASK equ 000Fh
CCP2CON_DC2B0_POSN equ 0004h
CCP2CON_DC2B0_POSITION equ 0004h
CCP2CON_DC2B0_SIZE equ 0001h
CCP2CON_DC2B0_LENGTH equ 0001h
CCP2CON_DC2B0_MASK equ 0010h
CCP2CON_DC2B1_POSN equ 0005h
CCP2CON_DC2B1_POSITION equ 0005h
CCP2CON_DC2B1_SIZE equ 0001h
CCP2CON_DC2B1_LENGTH equ 0001h
CCP2CON_DC2B1_MASK equ 0020h
CCP2CON_CCP2M0_POSN equ 0000h
CCP2CON_CCP2M0_POSITION equ 0000h
CCP2CON_CCP2M0_SIZE equ 0001h
CCP2CON_CCP2M0_LENGTH equ 0001h
CCP2CON_CCP2M0_MASK equ 0001h
CCP2CON_CCP2M1_POSN equ 0001h
CCP2CON_CCP2M1_POSITION equ 0001h
CCP2CON_CCP2M1_SIZE equ 0001h
CCP2CON_CCP2M1_LENGTH equ 0001h
CCP2CON_CCP2M1_MASK equ 0002h
CCP2CON_CCP2M2_POSN equ 0002h
CCP2CON_CCP2M2_POSITION equ 0002h
CCP2CON_CCP2M2_SIZE equ 0001h
CCP2CON_CCP2M2_LENGTH equ 0001h
CCP2CON_CCP2M2_MASK equ 0004h
CCP2CON_CCP2M3_POSN equ 0003h
CCP2CON_CCP2M3_POSITION equ 0003h
CCP2CON_CCP2M3_SIZE equ 0001h
CCP2CON_CCP2M3_LENGTH equ 0001h
CCP2CON_CCP2M3_MASK equ 0008h
CCP2CON_CCP2Y_POSN equ 0004h
CCP2CON_CCP2Y_POSITION equ 0004h
CCP2CON_CCP2Y_SIZE equ 0001h
CCP2CON_CCP2Y_LENGTH equ 0001h
CCP2CON_CCP2Y_MASK equ 0010h
CCP2CON_CCP2X_POSN equ 0005h
CCP2CON_CCP2X_POSITION equ 0005h
CCP2CON_CCP2X_SIZE equ 0001h
CCP2CON_CCP2X_LENGTH equ 0001h
CCP2CON_CCP2X_MASK equ 0020h



ADRESH equ 001Eh



ADCON0 equ 001Fh

ADCON0_ADON_POSN equ 0000h
ADCON0_ADON_POSITION equ 0000h
ADCON0_ADON_SIZE equ 0001h
ADCON0_ADON_LENGTH equ 0001h
ADCON0_ADON_MASK equ 0001h
ADCON0_GO_nDONE_POSN equ 0001h
ADCON0_GO_nDONE_POSITION equ 0001h
ADCON0_GO_nDONE_SIZE equ 0001h
ADCON0_GO_nDONE_LENGTH equ 0001h
ADCON0_GO_nDONE_MASK equ 0002h
ADCON0_CHS_POSN equ 0002h
ADCON0_CHS_POSITION equ 0002h
ADCON0_CHS_SIZE equ 0004h
ADCON0_CHS_LENGTH equ 0004h
ADCON0_CHS_MASK equ 003Ch
ADCON0_ADCS_POSN equ 0006h
ADCON0_ADCS_POSITION equ 0006h
ADCON0_ADCS_SIZE equ 0002h
ADCON0_ADCS_LENGTH equ 0002h
ADCON0_ADCS_MASK equ 00C0h
ADCON0_GO_POSN equ 0001h
ADCON0_GO_POSITION equ 0001h
ADCON0_GO_SIZE equ 0001h
ADCON0_GO_LENGTH equ 0001h
ADCON0_GO_MASK equ 0002h
ADCON0_CHS0_POSN equ 0002h
ADCON0_CHS0_POSITION equ 0002h
ADCON0_CHS0_SIZE equ 0001h
ADCON0_CHS0_LENGTH equ 0001h
ADCON0_CHS0_MASK equ 0004h
ADCON0_CHS1_POSN equ 0003h
ADCON0_CHS1_POSITION equ 0003h
ADCON0_CHS1_SIZE equ 0001h
ADCON0_CHS1_LENGTH equ 0001h
ADCON0_CHS1_MASK equ 0008h
ADCON0_CHS2_POSN equ 0004h
ADCON0_CHS2_POSITION equ 0004h
ADCON0_CHS2_SIZE equ 0001h
ADCON0_CHS2_LENGTH equ 0001h
ADCON0_CHS2_MASK equ 0010h
ADCON0_CHS3_POSN equ 0005h
ADCON0_CHS3_POSITION equ 0005h
ADCON0_CHS3_SIZE equ 0001h
ADCON0_CHS3_LENGTH equ 0001h
ADCON0_CHS3_MASK equ 0020h
ADCON0_ADCS0_POSN equ 0006h
ADCON0_ADCS0_POSITION equ 0006h
ADCON0_ADCS0_SIZE equ 0001h
ADCON0_ADCS0_LENGTH equ 0001h
ADCON0_ADCS0_MASK equ 0040h
ADCON0_ADCS1_POSN equ 0007h
ADCON0_ADCS1_POSITION equ 0007h
ADCON0_ADCS1_SIZE equ 0001h
ADCON0_ADCS1_LENGTH equ 0001h
ADCON0_ADCS1_MASK equ 0080h
ADCON0_nDONE_POSN equ 0001h
ADCON0_nDONE_POSITION equ 0001h
ADCON0_nDONE_SIZE equ 0001h
ADCON0_nDONE_LENGTH equ 0001h
ADCON0_nDONE_MASK equ 0002h
ADCON0_GO_DONE_POSN equ 0001h
ADCON0_GO_DONE_POSITION equ 0001h
ADCON0_GO_DONE_SIZE equ 0001h
ADCON0_GO_DONE_LENGTH equ 0001h
ADCON0_GO_DONE_MASK equ 0002h



OPTION_REG equ 0081h

OPTION_REG_PS_POSN equ 0000h
OPTION_REG_PS_POSITION equ 0000h
OPTION_REG_PS_SIZE equ 0003h
OPTION_REG_PS_LENGTH equ 0003h
OPTION_REG_PS_MASK equ 0007h
OPTION_REG_PSA_POSN equ 0003h
OPTION_REG_PSA_POSITION equ 0003h
OPTION_REG_PSA_SIZE equ 0001h
OPTION_REG_PSA_LENGTH equ 0001h
OPTION_REG_PSA_MASK equ 0008h
OPTION_REG_T0SE_POSN equ 0004h
OPTION_REG_T0SE_POSITION equ 0004h
OPTION_REG_T0SE_SIZE equ 0001h
OPTION_REG_T0SE_LENGTH equ 0001h
OPTION_REG_T0SE_MASK equ 0010h
OPTION_REG_T0CS_POSN equ 0005h
OPTION_REG_T0CS_POSITION equ 0005h
OPTION_REG_T0CS_SIZE equ 0001h
OPTION_REG_T0CS_LENGTH equ 0001h
OPTION_REG_T0CS_MASK equ 0020h
OPTION_REG_INTEDG_POSN equ 0006h
OPTION_REG_INTEDG_POSITION equ 0006h
OPTION_REG_INTEDG_SIZE equ 0001h
OPTION_REG_INTEDG_LENGTH equ 0001h
OPTION_REG_INTEDG_MASK equ 0040h
OPTION_REG_nRBPU_POSN equ 0007h
OPTION_REG_nRBPU_POSITION equ 0007h
OPTION_REG_nRBPU_SIZE equ 0001h
OPTION_REG_nRBPU_LENGTH equ 0001h
OPTION_REG_nRBPU_MASK equ 0080h
OPTION_REG_PS0_POSN equ 0000h
OPTION_REG_PS0_POSITION equ 0000h
OPTION_REG_PS0_SIZE equ 0001h
OPTION_REG_PS0_LENGTH equ 0001h
OPTION_REG_PS0_MASK equ 0001h
OPTION_REG_PS1_POSN equ 0001h
OPTION_REG_PS1_POSITION equ 0001h
OPTION_REG_PS1_SIZE equ 0001h
OPTION_REG_PS1_LENGTH equ 0001h
OPTION_REG_PS1_MASK equ 0002h
OPTION_REG_PS2_POSN equ 0002h
OPTION_REG_PS2_POSITION equ 0002h
OPTION_REG_PS2_SIZE equ 0001h
OPTION_REG_PS2_LENGTH equ 0001h
OPTION_REG_PS2_MASK equ 0004h



TRISA equ 0085h

TRISA_TRISA0_POSN equ 0000h
TRISA_TRISA0_POSITION equ 0000h
TRISA_TRISA0_SIZE equ 0001h
TRISA_TRISA0_LENGTH equ 0001h
TRISA_TRISA0_MASK equ 0001h
TRISA_TRISA1_POSN equ 0001h
TRISA_TRISA1_POSITION equ 0001h
TRISA_TRISA1_SIZE equ 0001h
TRISA_TRISA1_LENGTH equ 0001h
TRISA_TRISA1_MASK equ 0002h
TRISA_TRISA2_POSN equ 0002h
TRISA_TRISA2_POSITION equ 0002h
TRISA_TRISA2_SIZE equ 0001h
TRISA_TRISA2_LENGTH equ 0001h
TRISA_TRISA2_MASK equ 0004h
TRISA_TRISA3_POSN equ 0003h
TRISA_TRISA3_POSITION equ 0003h
TRISA_TRISA3_SIZE equ 0001h
TRISA_TRISA3_LENGTH equ 0001h
TRISA_TRISA3_MASK equ 0008h
TRISA_TRISA4_POSN equ 0004h
TRISA_TRISA4_POSITION equ 0004h
TRISA_TRISA4_SIZE equ 0001h
TRISA_TRISA4_LENGTH equ 0001h
TRISA_TRISA4_MASK equ 0010h
TRISA_TRISA5_POSN equ 0005h
TRISA_TRISA5_POSITION equ 0005h
TRISA_TRISA5_SIZE equ 0001h
TRISA_TRISA5_LENGTH equ 0001h
TRISA_TRISA5_MASK equ 0020h
TRISA_TRISA6_POSN equ 0006h
TRISA_TRISA6_POSITION equ 0006h
TRISA_TRISA6_SIZE equ 0001h
TRISA_TRISA6_LENGTH equ 0001h
TRISA_TRISA6_MASK equ 0040h
TRISA_TRISA7_POSN equ 0007h
TRISA_TRISA7_POSITION equ 0007h
TRISA_TRISA7_SIZE equ 0001h
TRISA_TRISA7_LENGTH equ 0001h
TRISA_TRISA7_MASK equ 0080h



TRISB equ 0086h

TRISB_TRISB0_POSN equ 0000h
TRISB_TRISB0_POSITION equ 0000h
TRISB_TRISB0_SIZE equ 0001h
TRISB_TRISB0_LENGTH equ 0001h
TRISB_TRISB0_MASK equ 0001h
TRISB_TRISB1_POSN equ 0001h
TRISB_TRISB1_POSITION equ 0001h
TRISB_TRISB1_SIZE equ 0001h
TRISB_TRISB1_LENGTH equ 0001h
TRISB_TRISB1_MASK equ 0002h
TRISB_TRISB2_POSN equ 0002h
TRISB_TRISB2_POSITION equ 0002h
TRISB_TRISB2_SIZE equ 0001h
TRISB_TRISB2_LENGTH equ 0001h
TRISB_TRISB2_MASK equ 0004h
TRISB_TRISB3_POSN equ 0003h
TRISB_TRISB3_POSITION equ 0003h
TRISB_TRISB3_SIZE equ 0001h
TRISB_TRISB3_LENGTH equ 0001h
TRISB_TRISB3_MASK equ 0008h
TRISB_TRISB4_POSN equ 0004h
TRISB_TRISB4_POSITION equ 0004h
TRISB_TRISB4_SIZE equ 0001h
TRISB_TRISB4_LENGTH equ 0001h
TRISB_TRISB4_MASK equ 0010h
TRISB_TRISB5_POSN equ 0005h
TRISB_TRISB5_POSITION equ 0005h
TRISB_TRISB5_SIZE equ 0001h
TRISB_TRISB5_LENGTH equ 0001h
TRISB_TRISB5_MASK equ 0020h
TRISB_TRISB6_POSN equ 0006h
TRISB_TRISB6_POSITION equ 0006h
TRISB_TRISB6_SIZE equ 0001h
TRISB_TRISB6_LENGTH equ 0001h
TRISB_TRISB6_MASK equ 0040h
TRISB_TRISB7_POSN equ 0007h
TRISB_TRISB7_POSITION equ 0007h
TRISB_TRISB7_SIZE equ 0001h
TRISB_TRISB7_LENGTH equ 0001h
TRISB_TRISB7_MASK equ 0080h



TRISC equ 0087h

TRISC_TRISC0_POSN equ 0000h
TRISC_TRISC0_POSITION equ 0000h
TRISC_TRISC0_SIZE equ 0001h
TRISC_TRISC0_LENGTH equ 0001h
TRISC_TRISC0_MASK equ 0001h
TRISC_TRISC1_POSN equ 0001h
TRISC_TRISC1_POSITION equ 0001h
TRISC_TRISC1_SIZE equ 0001h
TRISC_TRISC1_LENGTH equ 0001h
TRISC_TRISC1_MASK equ 0002h
TRISC_TRISC2_POSN equ 0002h
TRISC_TRISC2_POSITION equ 0002h
TRISC_TRISC2_SIZE equ 0001h
TRISC_TRISC2_LENGTH equ 0001h
TRISC_TRISC2_MASK equ 0004h
TRISC_TRISC3_POSN equ 0003h
TRISC_TRISC3_POSITION equ 0003h
TRISC_TRISC3_SIZE equ 0001h
TRISC_TRISC3_LENGTH equ 0001h
TRISC_TRISC3_MASK equ 0008h
TRISC_TRISC4_POSN equ 0004h
TRISC_TRISC4_POSITION equ 0004h
TRISC_TRISC4_SIZE equ 0001h
TRISC_TRISC4_LENGTH equ 0001h
TRISC_TRISC4_MASK equ 0010h
TRISC_TRISC5_POSN equ 0005h
TRISC_TRISC5_POSITION equ 0005h
TRISC_TRISC5_SIZE equ 0001h
TRISC_TRISC5_LENGTH equ 0001h
TRISC_TRISC5_MASK equ 0020h
TRISC_TRISC6_POSN equ 0006h
TRISC_TRISC6_POSITION equ 0006h
TRISC_TRISC6_SIZE equ 0001h
TRISC_TRISC6_LENGTH equ 0001h
TRISC_TRISC6_MASK equ 0040h
TRISC_TRISC7_POSN equ 0007h
TRISC_TRISC7_POSITION equ 0007h
TRISC_TRISC7_SIZE equ 0001h
TRISC_TRISC7_LENGTH equ 0001h
TRISC_TRISC7_MASK equ 0080h



TRISD equ 0088h

TRISD_TRISD0_POSN equ 0000h
TRISD_TRISD0_POSITION equ 0000h
TRISD_TRISD0_SIZE equ 0001h
TRISD_TRISD0_LENGTH equ 0001h
TRISD_TRISD0_MASK equ 0001h
TRISD_TRISD1_POSN equ 0001h
TRISD_TRISD1_POSITION equ 0001h
TRISD_TRISD1_SIZE equ 0001h
TRISD_TRISD1_LENGTH equ 0001h
TRISD_TRISD1_MASK equ 0002h
TRISD_TRISD2_POSN equ 0002h
TRISD_TRISD2_POSITION equ 0002h
TRISD_TRISD2_SIZE equ 0001h
TRISD_TRISD2_LENGTH equ 0001h
TRISD_TRISD2_MASK equ 0004h
TRISD_TRISD3_POSN equ 0003h
TRISD_TRISD3_POSITION equ 0003h
TRISD_TRISD3_SIZE equ 0001h
TRISD_TRISD3_LENGTH equ 0001h
TRISD_TRISD3_MASK equ 0008h
TRISD_TRISD4_POSN equ 0004h
TRISD_TRISD4_POSITION equ 0004h
TRISD_TRISD4_SIZE equ 0001h
TRISD_TRISD4_LENGTH equ 0001h
TRISD_TRISD4_MASK equ 0010h
TRISD_TRISD5_POSN equ 0005h
TRISD_TRISD5_POSITION equ 0005h
TRISD_TRISD5_SIZE equ 0001h
TRISD_TRISD5_LENGTH equ 0001h
TRISD_TRISD5_MASK equ 0020h
TRISD_TRISD6_POSN equ 0006h
TRISD_TRISD6_POSITION equ 0006h
TRISD_TRISD6_SIZE equ 0001h
TRISD_TRISD6_LENGTH equ 0001h
TRISD_TRISD6_MASK equ 0040h
TRISD_TRISD7_POSN equ 0007h
TRISD_TRISD7_POSITION equ 0007h
TRISD_TRISD7_SIZE equ 0001h
TRISD_TRISD7_LENGTH equ 0001h
TRISD_TRISD7_MASK equ 0080h



TRISE equ 0089h

TRISE_TRISE0_POSN equ 0000h
TRISE_TRISE0_POSITION equ 0000h
TRISE_TRISE0_SIZE equ 0001h
TRISE_TRISE0_LENGTH equ 0001h
TRISE_TRISE0_MASK equ 0001h
TRISE_TRISE1_POSN equ 0001h
TRISE_TRISE1_POSITION equ 0001h
TRISE_TRISE1_SIZE equ 0001h
TRISE_TRISE1_LENGTH equ 0001h
TRISE_TRISE1_MASK equ 0002h
TRISE_TRISE2_POSN equ 0002h
TRISE_TRISE2_POSITION equ 0002h
TRISE_TRISE2_SIZE equ 0001h
TRISE_TRISE2_LENGTH equ 0001h
TRISE_TRISE2_MASK equ 0004h
TRISE_TRISE3_POSN equ 0003h
TRISE_TRISE3_POSITION equ 0003h
TRISE_TRISE3_SIZE equ 0001h
TRISE_TRISE3_LENGTH equ 0001h
TRISE_TRISE3_MASK equ 0008h



PIE1 equ 008Ch

PIE1_TMR1IE_POSN equ 0000h
PIE1_TMR1IE_POSITION equ 0000h
PIE1_TMR1IE_SIZE equ 0001h
PIE1_TMR1IE_LENGTH equ 0001h
PIE1_TMR1IE_MASK equ 0001h
PIE1_TMR2IE_POSN equ 0001h
PIE1_TMR2IE_POSITION equ 0001h
PIE1_TMR2IE_SIZE equ 0001h
PIE1_TMR2IE_LENGTH equ 0001h
PIE1_TMR2IE_MASK equ 0002h
PIE1_CCP1IE_POSN equ 0002h
PIE1_CCP1IE_POSITION equ 0002h
PIE1_CCP1IE_SIZE equ 0001h
PIE1_CCP1IE_LENGTH equ 0001h
PIE1_CCP1IE_MASK equ 0004h
PIE1_SSPIE_POSN equ 0003h
PIE1_SSPIE_POSITION equ 0003h
PIE1_SSPIE_SIZE equ 0001h
PIE1_SSPIE_LENGTH equ 0001h
PIE1_SSPIE_MASK equ 0008h
PIE1_TXIE_POSN equ 0004h
PIE1_TXIE_POSITION equ 0004h
PIE1_TXIE_SIZE equ 0001h
PIE1_TXIE_LENGTH equ 0001h
PIE1_TXIE_MASK equ 0010h
PIE1_RCIE_POSN equ 0005h
PIE1_RCIE_POSITION equ 0005h
PIE1_RCIE_SIZE equ 0001h
PIE1_RCIE_LENGTH equ 0001h
PIE1_RCIE_MASK equ 0020h
PIE1_ADIE_POSN equ 0006h
PIE1_ADIE_POSITION equ 0006h
PIE1_ADIE_SIZE equ 0001h
PIE1_ADIE_LENGTH equ 0001h
PIE1_ADIE_MASK equ 0040h



PIE2 equ 008Dh

PIE2_CCP2IE_POSN equ 0000h
PIE2_CCP2IE_POSITION equ 0000h
PIE2_CCP2IE_SIZE equ 0001h
PIE2_CCP2IE_LENGTH equ 0001h
PIE2_CCP2IE_MASK equ 0001h
PIE2_ULPWUIE_POSN equ 0002h
PIE2_ULPWUIE_POSITION equ 0002h
PIE2_ULPWUIE_SIZE equ 0001h
PIE2_ULPWUIE_LENGTH equ 0001h
PIE2_ULPWUIE_MASK equ 0004h
PIE2_BCLIE_POSN equ 0003h
PIE2_BCLIE_POSITION equ 0003h
PIE2_BCLIE_SIZE equ 0001h
PIE2_BCLIE_LENGTH equ 0001h
PIE2_BCLIE_MASK equ 0008h
PIE2_EEIE_POSN equ 0004h
PIE2_EEIE_POSITION equ 0004h
PIE2_EEIE_SIZE equ 0001h
PIE2_EEIE_LENGTH equ 0001h
PIE2_EEIE_MASK equ 0010h
PIE2_C1IE_POSN equ 0005h
PIE2_C1IE_POSITION equ 0005h
PIE2_C1IE_SIZE equ 0001h
PIE2_C1IE_LENGTH equ 0001h
PIE2_C1IE_MASK equ 0020h
PIE2_C2IE_POSN equ 0006h
PIE2_C2IE_POSITION equ 0006h
PIE2_C2IE_SIZE equ 0001h
PIE2_C2IE_LENGTH equ 0001h
PIE2_C2IE_MASK equ 0040h
PIE2_OSFIE_POSN equ 0007h
PIE2_OSFIE_POSITION equ 0007h
PIE2_OSFIE_SIZE equ 0001h
PIE2_OSFIE_LENGTH equ 0001h
PIE2_OSFIE_MASK equ 0080h



PCON equ 008Eh

PCON_nBOR_POSN equ 0000h
PCON_nBOR_POSITION equ 0000h
PCON_nBOR_SIZE equ 0001h
PCON_nBOR_LENGTH equ 0001h
PCON_nBOR_MASK equ 0001h
PCON_nPOR_POSN equ 0001h
PCON_nPOR_POSITION equ 0001h
PCON_nPOR_SIZE equ 0001h
PCON_nPOR_LENGTH equ 0001h
PCON_nPOR_MASK equ 0002h
PCON_SBOREN_POSN equ 0004h
PCON_SBOREN_POSITION equ 0004h
PCON_SBOREN_SIZE equ 0001h
PCON_SBOREN_LENGTH equ 0001h
PCON_SBOREN_MASK equ 0010h
PCON_ULPWUE_POSN equ 0005h
PCON_ULPWUE_POSITION equ 0005h
PCON_ULPWUE_SIZE equ 0001h
PCON_ULPWUE_LENGTH equ 0001h
PCON_ULPWUE_MASK equ 0020h
PCON_nBO_POSN equ 0000h
PCON_nBO_POSITION equ 0000h
PCON_nBO_SIZE equ 0001h
PCON_nBO_LENGTH equ 0001h
PCON_nBO_MASK equ 0001h



OSCCON equ 008Fh

OSCCON_SCS_POSN equ 0000h
OSCCON_SCS_POSITION equ 0000h
OSCCON_SCS_SIZE equ 0001h
OSCCON_SCS_LENGTH equ 0001h
OSCCON_SCS_MASK equ 0001h
OSCCON_LTS_POSN equ 0001h
OSCCON_LTS_POSITION equ 0001h
OSCCON_LTS_SIZE equ 0001h
OSCCON_LTS_LENGTH equ 0001h
OSCCON_LTS_MASK equ 0002h
OSCCON_HTS_POSN equ 0002h
OSCCON_HTS_POSITION equ 0002h
OSCCON_HTS_SIZE equ 0001h
OSCCON_HTS_LENGTH equ 0001h
OSCCON_HTS_MASK equ 0004h
OSCCON_OSTS_POSN equ 0003h
OSCCON_OSTS_POSITION equ 0003h
OSCCON_OSTS_SIZE equ 0001h
OSCCON_OSTS_LENGTH equ 0001h
OSCCON_OSTS_MASK equ 0008h
OSCCON_IRCF_POSN equ 0004h
OSCCON_IRCF_POSITION equ 0004h
OSCCON_IRCF_SIZE equ 0003h
OSCCON_IRCF_LENGTH equ 0003h
OSCCON_IRCF_MASK equ 0070h
OSCCON_IRCF0_POSN equ 0004h
OSCCON_IRCF0_POSITION equ 0004h
OSCCON_IRCF0_SIZE equ 0001h
OSCCON_IRCF0_LENGTH equ 0001h
OSCCON_IRCF0_MASK equ 0010h
OSCCON_IRCF1_POSN equ 0005h
OSCCON_IRCF1_POSITION equ 0005h
OSCCON_IRCF1_SIZE equ 0001h
OSCCON_IRCF1_LENGTH equ 0001h
OSCCON_IRCF1_MASK equ 0020h
OSCCON_IRCF2_POSN equ 0006h
OSCCON_IRCF2_POSITION equ 0006h
OSCCON_IRCF2_SIZE equ 0001h
OSCCON_IRCF2_LENGTH equ 0001h
OSCCON_IRCF2_MASK equ 0040h



OSCTUNE equ 0090h

OSCTUNE_TUN_POSN equ 0000h
OSCTUNE_TUN_POSITION equ 0000h
OSCTUNE_TUN_SIZE equ 0005h
OSCTUNE_TUN_LENGTH equ 0005h
OSCTUNE_TUN_MASK equ 001Fh
OSCTUNE_TUN0_POSN equ 0000h
OSCTUNE_TUN0_POSITION equ 0000h
OSCTUNE_TUN0_SIZE equ 0001h
OSCTUNE_TUN0_LENGTH equ 0001h
OSCTUNE_TUN0_MASK equ 0001h
OSCTUNE_TUN1_POSN equ 0001h
OSCTUNE_TUN1_POSITION equ 0001h
OSCTUNE_TUN1_SIZE equ 0001h
OSCTUNE_TUN1_LENGTH equ 0001h
OSCTUNE_TUN1_MASK equ 0002h
OSCTUNE_TUN2_POSN equ 0002h
OSCTUNE_TUN2_POSITION equ 0002h
OSCTUNE_TUN2_SIZE equ 0001h
OSCTUNE_TUN2_LENGTH equ 0001h
OSCTUNE_TUN2_MASK equ 0004h
OSCTUNE_TUN3_POSN equ 0003h
OSCTUNE_TUN3_POSITION equ 0003h
OSCTUNE_TUN3_SIZE equ 0001h
OSCTUNE_TUN3_LENGTH equ 0001h
OSCTUNE_TUN3_MASK equ 0008h
OSCTUNE_TUN4_POSN equ 0004h
OSCTUNE_TUN4_POSITION equ 0004h
OSCTUNE_TUN4_SIZE equ 0001h
OSCTUNE_TUN4_LENGTH equ 0001h
OSCTUNE_TUN4_MASK equ 0010h



SSPCON2 equ 0091h

SSPCON2_SEN_POSN equ 0000h
SSPCON2_SEN_POSITION equ 0000h
SSPCON2_SEN_SIZE equ 0001h
SSPCON2_SEN_LENGTH equ 0001h
SSPCON2_SEN_MASK equ 0001h
SSPCON2_RSEN_POSN equ 0001h
SSPCON2_RSEN_POSITION equ 0001h
SSPCON2_RSEN_SIZE equ 0001h
SSPCON2_RSEN_LENGTH equ 0001h
SSPCON2_RSEN_MASK equ 0002h
SSPCON2_PEN_POSN equ 0002h
SSPCON2_PEN_POSITION equ 0002h
SSPCON2_PEN_SIZE equ 0001h
SSPCON2_PEN_LENGTH equ 0001h
SSPCON2_PEN_MASK equ 0004h
SSPCON2_RCEN_POSN equ 0003h
SSPCON2_RCEN_POSITION equ 0003h
SSPCON2_RCEN_SIZE equ 0001h
SSPCON2_RCEN_LENGTH equ 0001h
SSPCON2_RCEN_MASK equ 0008h
SSPCON2_ACKEN_POSN equ 0004h
SSPCON2_ACKEN_POSITION equ 0004h
SSPCON2_ACKEN_SIZE equ 0001h
SSPCON2_ACKEN_LENGTH equ 0001h
SSPCON2_ACKEN_MASK equ 0010h
SSPCON2_ACKDT_POSN equ 0005h
SSPCON2_ACKDT_POSITION equ 0005h
SSPCON2_ACKDT_SIZE equ 0001h
SSPCON2_ACKDT_LENGTH equ 0001h
SSPCON2_ACKDT_MASK equ 0020h
SSPCON2_ACKSTAT_POSN equ 0006h
SSPCON2_ACKSTAT_POSITION equ 0006h
SSPCON2_ACKSTAT_SIZE equ 0001h
SSPCON2_ACKSTAT_LENGTH equ 0001h
SSPCON2_ACKSTAT_MASK equ 0040h
SSPCON2_GCEN_POSN equ 0007h
SSPCON2_GCEN_POSITION equ 0007h
SSPCON2_GCEN_SIZE equ 0001h
SSPCON2_GCEN_LENGTH equ 0001h
SSPCON2_GCEN_MASK equ 0080h



PR2 equ 0092h



SSPADD equ 0093h



SSPMSK equ 0093h

SSPMSK_MSK0_POSN equ 0000h
SSPMSK_MSK0_POSITION equ 0000h
SSPMSK_MSK0_SIZE equ 0001h
SSPMSK_MSK0_LENGTH equ 0001h
SSPMSK_MSK0_MASK equ 0001h
SSPMSK_MSK1_POSN equ 0001h
SSPMSK_MSK1_POSITION equ 0001h
SSPMSK_MSK1_SIZE equ 0001h
SSPMSK_MSK1_LENGTH equ 0001h
SSPMSK_MSK1_MASK equ 0002h
SSPMSK_MSK2_POSN equ 0002h
SSPMSK_MSK2_POSITION equ 0002h
SSPMSK_MSK2_SIZE equ 0001h
SSPMSK_MSK2_LENGTH equ 0001h
SSPMSK_MSK2_MASK equ 0004h
SSPMSK_MSK3_POSN equ 0003h
SSPMSK_MSK3_POSITION equ 0003h
SSPMSK_MSK3_SIZE equ 0001h
SSPMSK_MSK3_LENGTH equ 0001h
SSPMSK_MSK3_MASK equ 0008h
SSPMSK_MSK4_POSN equ 0004h
SSPMSK_MSK4_POSITION equ 0004h
SSPMSK_MSK4_SIZE equ 0001h
SSPMSK_MSK4_LENGTH equ 0001h
SSPMSK_MSK4_MASK equ 0010h
SSPMSK_MSK5_POSN equ 0005h
SSPMSK_MSK5_POSITION equ 0005h
SSPMSK_MSK5_SIZE equ 0001h
SSPMSK_MSK5_LENGTH equ 0001h
SSPMSK_MSK5_MASK equ 0020h
SSPMSK_MSK6_POSN equ 0006h
SSPMSK_MSK6_POSITION equ 0006h
SSPMSK_MSK6_SIZE equ 0001h
SSPMSK_MSK6_LENGTH equ 0001h
SSPMSK_MSK6_MASK equ 0040h
SSPMSK_MSK7_POSN equ 0007h
SSPMSK_MSK7_POSITION equ 0007h
SSPMSK_MSK7_SIZE equ 0001h
SSPMSK_MSK7_LENGTH equ 0001h
SSPMSK_MSK7_MASK equ 0080h



SSPSTAT equ 0094h

SSPSTAT_BF_POSN equ 0000h
SSPSTAT_BF_POSITION equ 0000h
SSPSTAT_BF_SIZE equ 0001h
SSPSTAT_BF_LENGTH equ 0001h
SSPSTAT_BF_MASK equ 0001h
SSPSTAT_UA_POSN equ 0001h
SSPSTAT_UA_POSITION equ 0001h
SSPSTAT_UA_SIZE equ 0001h
SSPSTAT_UA_LENGTH equ 0001h
SSPSTAT_UA_MASK equ 0002h
SSPSTAT_R_nW_POSN equ 0002h
SSPSTAT_R_nW_POSITION equ 0002h
SSPSTAT_R_nW_SIZE equ 0001h
SSPSTAT_R_nW_LENGTH equ 0001h
SSPSTAT_R_nW_MASK equ 0004h
SSPSTAT_S_POSN equ 0003h
SSPSTAT_S_POSITION equ 0003h
SSPSTAT_S_SIZE equ 0001h
SSPSTAT_S_LENGTH equ 0001h
SSPSTAT_S_MASK equ 0008h
SSPSTAT_P_POSN equ 0004h
SSPSTAT_P_POSITION equ 0004h
SSPSTAT_P_SIZE equ 0001h
SSPSTAT_P_LENGTH equ 0001h
SSPSTAT_P_MASK equ 0010h
SSPSTAT_D_nA_POSN equ 0005h
SSPSTAT_D_nA_POSITION equ 0005h
SSPSTAT_D_nA_SIZE equ 0001h
SSPSTAT_D_nA_LENGTH equ 0001h
SSPSTAT_D_nA_MASK equ 0020h
SSPSTAT_CKE_POSN equ 0006h
SSPSTAT_CKE_POSITION equ 0006h
SSPSTAT_CKE_SIZE equ 0001h
SSPSTAT_CKE_LENGTH equ 0001h
SSPSTAT_CKE_MASK equ 0040h
SSPSTAT_SMP_POSN equ 0007h
SSPSTAT_SMP_POSITION equ 0007h
SSPSTAT_SMP_SIZE equ 0001h
SSPSTAT_SMP_LENGTH equ 0001h
SSPSTAT_SMP_MASK equ 0080h
SSPSTAT_R_POSN equ 0002h
SSPSTAT_R_POSITION equ 0002h
SSPSTAT_R_SIZE equ 0001h
SSPSTAT_R_LENGTH equ 0001h
SSPSTAT_R_MASK equ 0004h
SSPSTAT_D_POSN equ 0005h
SSPSTAT_D_POSITION equ 0005h
SSPSTAT_D_SIZE equ 0001h
SSPSTAT_D_LENGTH equ 0001h
SSPSTAT_D_MASK equ 0020h
SSPSTAT_I2C_READ_POSN equ 0002h
SSPSTAT_I2C_READ_POSITION equ 0002h
SSPSTAT_I2C_READ_SIZE equ 0001h
SSPSTAT_I2C_READ_LENGTH equ 0001h
SSPSTAT_I2C_READ_MASK equ 0004h
SSPSTAT_I2C_START_POSN equ 0003h
SSPSTAT_I2C_START_POSITION equ 0003h
SSPSTAT_I2C_START_SIZE equ 0001h
SSPSTAT_I2C_START_LENGTH equ 0001h
SSPSTAT_I2C_START_MASK equ 0008h
SSPSTAT_I2C_STOP_POSN equ 0004h
SSPSTAT_I2C_STOP_POSITION equ 0004h
SSPSTAT_I2C_STOP_SIZE equ 0001h
SSPSTAT_I2C_STOP_LENGTH equ 0001h
SSPSTAT_I2C_STOP_MASK equ 0010h
SSPSTAT_I2C_DATA_POSN equ 0005h
SSPSTAT_I2C_DATA_POSITION equ 0005h
SSPSTAT_I2C_DATA_SIZE equ 0001h
SSPSTAT_I2C_DATA_LENGTH equ 0001h
SSPSTAT_I2C_DATA_MASK equ 0020h
SSPSTAT_nW_POSN equ 0002h
SSPSTAT_nW_POSITION equ 0002h
SSPSTAT_nW_SIZE equ 0001h
SSPSTAT_nW_LENGTH equ 0001h
SSPSTAT_nW_MASK equ 0004h
SSPSTAT_nA_POSN equ 0005h
SSPSTAT_nA_POSITION equ 0005h
SSPSTAT_nA_SIZE equ 0001h
SSPSTAT_nA_LENGTH equ 0001h
SSPSTAT_nA_MASK equ 0020h
SSPSTAT_nWRITE_POSN equ 0002h
SSPSTAT_nWRITE_POSITION equ 0002h
SSPSTAT_nWRITE_SIZE equ 0001h
SSPSTAT_nWRITE_LENGTH equ 0001h
SSPSTAT_nWRITE_MASK equ 0004h
SSPSTAT_nADDRESS_POSN equ 0005h
SSPSTAT_nADDRESS_POSITION equ 0005h
SSPSTAT_nADDRESS_SIZE equ 0001h
SSPSTAT_nADDRESS_LENGTH equ 0001h
SSPSTAT_nADDRESS_MASK equ 0020h
SSPSTAT_R_W_POSN equ 0002h
SSPSTAT_R_W_POSITION equ 0002h
SSPSTAT_R_W_SIZE equ 0001h
SSPSTAT_R_W_LENGTH equ 0001h
SSPSTAT_R_W_MASK equ 0004h
SSPSTAT_D_A_POSN equ 0005h
SSPSTAT_D_A_POSITION equ 0005h
SSPSTAT_D_A_SIZE equ 0001h
SSPSTAT_D_A_LENGTH equ 0001h
SSPSTAT_D_A_MASK equ 0020h
SSPSTAT_READ_WRITE_POSN equ 0002h
SSPSTAT_READ_WRITE_POSITION equ 0002h
SSPSTAT_READ_WRITE_SIZE equ 0001h
SSPSTAT_READ_WRITE_LENGTH equ 0001h
SSPSTAT_READ_WRITE_MASK equ 0004h
SSPSTAT_DATA_ADDRESS_POSN equ 0005h
SSPSTAT_DATA_ADDRESS_POSITION equ 0005h
SSPSTAT_DATA_ADDRESS_SIZE equ 0001h
SSPSTAT_DATA_ADDRESS_LENGTH equ 0001h
SSPSTAT_DATA_ADDRESS_MASK equ 0020h



WPUB equ 0095h

WPUB_WPUB_POSN equ 0000h
WPUB_WPUB_POSITION equ 0000h
WPUB_WPUB_SIZE equ 0008h
WPUB_WPUB_LENGTH equ 0008h
WPUB_WPUB_MASK equ 00FFh
WPUB_WPUB0_POSN equ 0000h
WPUB_WPUB0_POSITION equ 0000h
WPUB_WPUB0_SIZE equ 0001h
WPUB_WPUB0_LENGTH equ 0001h
WPUB_WPUB0_MASK equ 0001h
WPUB_WPUB1_POSN equ 0001h
WPUB_WPUB1_POSITION equ 0001h
WPUB_WPUB1_SIZE equ 0001h
WPUB_WPUB1_LENGTH equ 0001h
WPUB_WPUB1_MASK equ 0002h
WPUB_WPUB2_POSN equ 0002h
WPUB_WPUB2_POSITION equ 0002h
WPUB_WPUB2_SIZE equ 0001h
WPUB_WPUB2_LENGTH equ 0001h
WPUB_WPUB2_MASK equ 0004h
WPUB_WPUB3_POSN equ 0003h
WPUB_WPUB3_POSITION equ 0003h
WPUB_WPUB3_SIZE equ 0001h
WPUB_WPUB3_LENGTH equ 0001h
WPUB_WPUB3_MASK equ 0008h
WPUB_WPUB4_POSN equ 0004h
WPUB_WPUB4_POSITION equ 0004h
WPUB_WPUB4_SIZE equ 0001h
WPUB_WPUB4_LENGTH equ 0001h
WPUB_WPUB4_MASK equ 0010h
WPUB_WPUB5_POSN equ 0005h
WPUB_WPUB5_POSITION equ 0005h
WPUB_WPUB5_SIZE equ 0001h
WPUB_WPUB5_LENGTH equ 0001h
WPUB_WPUB5_MASK equ 0020h
WPUB_WPUB6_POSN equ 0006h
WPUB_WPUB6_POSITION equ 0006h
WPUB_WPUB6_SIZE equ 0001h
WPUB_WPUB6_LENGTH equ 0001h
WPUB_WPUB6_MASK equ 0040h
WPUB_WPUB7_POSN equ 0007h
WPUB_WPUB7_POSITION equ 0007h
WPUB_WPUB7_SIZE equ 0001h
WPUB_WPUB7_LENGTH equ 0001h
WPUB_WPUB7_MASK equ 0080h



IOCB equ 0096h

IOCB_IOCB_POSN equ 0000h
IOCB_IOCB_POSITION equ 0000h
IOCB_IOCB_SIZE equ 0008h
IOCB_IOCB_LENGTH equ 0008h
IOCB_IOCB_MASK equ 00FFh
IOCB_IOCB0_POSN equ 0000h
IOCB_IOCB0_POSITION equ 0000h
IOCB_IOCB0_SIZE equ 0001h
IOCB_IOCB0_LENGTH equ 0001h
IOCB_IOCB0_MASK equ 0001h
IOCB_IOCB1_POSN equ 0001h
IOCB_IOCB1_POSITION equ 0001h
IOCB_IOCB1_SIZE equ 0001h
IOCB_IOCB1_LENGTH equ 0001h
IOCB_IOCB1_MASK equ 0002h
IOCB_IOCB2_POSN equ 0002h
IOCB_IOCB2_POSITION equ 0002h
IOCB_IOCB2_SIZE equ 0001h
IOCB_IOCB2_LENGTH equ 0001h
IOCB_IOCB2_MASK equ 0004h
IOCB_IOCB3_POSN equ 0003h
IOCB_IOCB3_POSITION equ 0003h
IOCB_IOCB3_SIZE equ 0001h
IOCB_IOCB3_LENGTH equ 0001h
IOCB_IOCB3_MASK equ 0008h
IOCB_IOCB4_POSN equ 0004h
IOCB_IOCB4_POSITION equ 0004h
IOCB_IOCB4_SIZE equ 0001h
IOCB_IOCB4_LENGTH equ 0001h
IOCB_IOCB4_MASK equ 0010h
IOCB_IOCB5_POSN equ 0005h
IOCB_IOCB5_POSITION equ 0005h
IOCB_IOCB5_SIZE equ 0001h
IOCB_IOCB5_LENGTH equ 0001h
IOCB_IOCB5_MASK equ 0020h
IOCB_IOCB6_POSN equ 0006h
IOCB_IOCB6_POSITION equ 0006h
IOCB_IOCB6_SIZE equ 0001h
IOCB_IOCB6_LENGTH equ 0001h
IOCB_IOCB6_MASK equ 0040h
IOCB_IOCB7_POSN equ 0007h
IOCB_IOCB7_POSITION equ 0007h
IOCB_IOCB7_SIZE equ 0001h
IOCB_IOCB7_LENGTH equ 0001h
IOCB_IOCB7_MASK equ 0080h



VRCON equ 0097h

VRCON_VR_POSN equ 0000h
VRCON_VR_POSITION equ 0000h
VRCON_VR_SIZE equ 0004h
VRCON_VR_LENGTH equ 0004h
VRCON_VR_MASK equ 000Fh
VRCON_VRSS_POSN equ 0004h
VRCON_VRSS_POSITION equ 0004h
VRCON_VRSS_SIZE equ 0001h
VRCON_VRSS_LENGTH equ 0001h
VRCON_VRSS_MASK equ 0010h
VRCON_VRR_POSN equ 0005h
VRCON_VRR_POSITION equ 0005h
VRCON_VRR_SIZE equ 0001h
VRCON_VRR_LENGTH equ 0001h
VRCON_VRR_MASK equ 0020h
VRCON_VROE_POSN equ 0006h
VRCON_VROE_POSITION equ 0006h
VRCON_VROE_SIZE equ 0001h
VRCON_VROE_LENGTH equ 0001h
VRCON_VROE_MASK equ 0040h
VRCON_VREN_POSN equ 0007h
VRCON_VREN_POSITION equ 0007h
VRCON_VREN_SIZE equ 0001h
VRCON_VREN_LENGTH equ 0001h
VRCON_VREN_MASK equ 0080h
VRCON_VR0_POSN equ 0000h
VRCON_VR0_POSITION equ 0000h
VRCON_VR0_SIZE equ 0001h
VRCON_VR0_LENGTH equ 0001h
VRCON_VR0_MASK equ 0001h
VRCON_VR1_POSN equ 0001h
VRCON_VR1_POSITION equ 0001h
VRCON_VR1_SIZE equ 0001h
VRCON_VR1_LENGTH equ 0001h
VRCON_VR1_MASK equ 0002h
VRCON_VR2_POSN equ 0002h
VRCON_VR2_POSITION equ 0002h
VRCON_VR2_SIZE equ 0001h
VRCON_VR2_LENGTH equ 0001h
VRCON_VR2_MASK equ 0004h
VRCON_VR3_POSN equ 0003h
VRCON_VR3_POSITION equ 0003h
VRCON_VR3_SIZE equ 0001h
VRCON_VR3_LENGTH equ 0001h
VRCON_VR3_MASK equ 0008h



TXSTA equ 0098h

TXSTA_TX9D_POSN equ 0000h
TXSTA_TX9D_POSITION equ 0000h
TXSTA_TX9D_SIZE equ 0001h
TXSTA_TX9D_LENGTH equ 0001h
TXSTA_TX9D_MASK equ 0001h
TXSTA_TRMT_POSN equ 0001h
TXSTA_TRMT_POSITION equ 0001h
TXSTA_TRMT_SIZE equ 0001h
TXSTA_TRMT_LENGTH equ 0001h
TXSTA_TRMT_MASK equ 0002h
TXSTA_BRGH_POSN equ 0002h
TXSTA_BRGH_POSITION equ 0002h
TXSTA_BRGH_SIZE equ 0001h
TXSTA_BRGH_LENGTH equ 0001h
TXSTA_BRGH_MASK equ 0004h
TXSTA_SENDB_POSN equ 0003h
TXSTA_SENDB_POSITION equ 0003h
TXSTA_SENDB_SIZE equ 0001h
TXSTA_SENDB_LENGTH equ 0001h
TXSTA_SENDB_MASK equ 0008h
TXSTA_SYNC_POSN equ 0004h
TXSTA_SYNC_POSITION equ 0004h
TXSTA_SYNC_SIZE equ 0001h
TXSTA_SYNC_LENGTH equ 0001h
TXSTA_SYNC_MASK equ 0010h
TXSTA_TXEN_POSN equ 0005h
TXSTA_TXEN_POSITION equ 0005h
TXSTA_TXEN_SIZE equ 0001h
TXSTA_TXEN_LENGTH equ 0001h
TXSTA_TXEN_MASK equ 0020h
TXSTA_TX9_POSN equ 0006h
TXSTA_TX9_POSITION equ 0006h
TXSTA_TX9_SIZE equ 0001h
TXSTA_TX9_LENGTH equ 0001h
TXSTA_TX9_MASK equ 0040h
TXSTA_CSRC_POSN equ 0007h
TXSTA_CSRC_POSITION equ 0007h
TXSTA_CSRC_SIZE equ 0001h
TXSTA_CSRC_LENGTH equ 0001h
TXSTA_CSRC_MASK equ 0080h
TXSTA_TXD8_POSN equ 0000h
TXSTA_TXD8_POSITION equ 0000h
TXSTA_TXD8_SIZE equ 0001h
TXSTA_TXD8_LENGTH equ 0001h
TXSTA_TXD8_MASK equ 0001h
TXSTA_nTX8_POSN equ 0006h
TXSTA_nTX8_POSITION equ 0006h
TXSTA_nTX8_SIZE equ 0001h
TXSTA_nTX8_LENGTH equ 0001h
TXSTA_nTX8_MASK equ 0040h
TXSTA_TX8_9_POSN equ 0006h
TXSTA_TX8_9_POSITION equ 0006h
TXSTA_TX8_9_SIZE equ 0001h
TXSTA_TX8_9_LENGTH equ 0001h
TXSTA_TX8_9_MASK equ 0040h



SPBRG equ 0099h

SPBRG_BRG0_POSN equ 0000h
SPBRG_BRG0_POSITION equ 0000h
SPBRG_BRG0_SIZE equ 0001h
SPBRG_BRG0_LENGTH equ 0001h
SPBRG_BRG0_MASK equ 0001h
SPBRG_BRG1_POSN equ 0001h
SPBRG_BRG1_POSITION equ 0001h
SPBRG_BRG1_SIZE equ 0001h
SPBRG_BRG1_LENGTH equ 0001h
SPBRG_BRG1_MASK equ 0002h
SPBRG_BRG2_POSN equ 0002h
SPBRG_BRG2_POSITION equ 0002h
SPBRG_BRG2_SIZE equ 0001h
SPBRG_BRG2_LENGTH equ 0001h
SPBRG_BRG2_MASK equ 0004h
SPBRG_BRG3_POSN equ 0003h
SPBRG_BRG3_POSITION equ 0003h
SPBRG_BRG3_SIZE equ 0001h
SPBRG_BRG3_LENGTH equ 0001h
SPBRG_BRG3_MASK equ 0008h
SPBRG_BRG4_POSN equ 0004h
SPBRG_BRG4_POSITION equ 0004h
SPBRG_BRG4_SIZE equ 0001h
SPBRG_BRG4_LENGTH equ 0001h
SPBRG_BRG4_MASK equ 0010h
SPBRG_BRG5_POSN equ 0005h
SPBRG_BRG5_POSITION equ 0005h
SPBRG_BRG5_SIZE equ 0001h
SPBRG_BRG5_LENGTH equ 0001h
SPBRG_BRG5_MASK equ 0020h
SPBRG_BRG6_POSN equ 0006h
SPBRG_BRG6_POSITION equ 0006h
SPBRG_BRG6_SIZE equ 0001h
SPBRG_BRG6_LENGTH equ 0001h
SPBRG_BRG6_MASK equ 0040h
SPBRG_BRG7_POSN equ 0007h
SPBRG_BRG7_POSITION equ 0007h
SPBRG_BRG7_SIZE equ 0001h
SPBRG_BRG7_LENGTH equ 0001h
SPBRG_BRG7_MASK equ 0080h



SPBRGH equ 009Ah

SPBRGH_SPBRGH_POSN equ 0000h
SPBRGH_SPBRGH_POSITION equ 0000h
SPBRGH_SPBRGH_SIZE equ 0008h
SPBRGH_SPBRGH_LENGTH equ 0008h
SPBRGH_SPBRGH_MASK equ 00FFh
SPBRGH_BRG8_POSN equ 0000h
SPBRGH_BRG8_POSITION equ 0000h
SPBRGH_BRG8_SIZE equ 0001h
SPBRGH_BRG8_LENGTH equ 0001h
SPBRGH_BRG8_MASK equ 0001h
SPBRGH_BRG9_POSN equ 0001h
SPBRGH_BRG9_POSITION equ 0001h
SPBRGH_BRG9_SIZE equ 0001h
SPBRGH_BRG9_LENGTH equ 0001h
SPBRGH_BRG9_MASK equ 0002h
SPBRGH_BRG10_POSN equ 0002h
SPBRGH_BRG10_POSITION equ 0002h
SPBRGH_BRG10_SIZE equ 0001h
SPBRGH_BRG10_LENGTH equ 0001h
SPBRGH_BRG10_MASK equ 0004h
SPBRGH_BRG11_POSN equ 0003h
SPBRGH_BRG11_POSITION equ 0003h
SPBRGH_BRG11_SIZE equ 0001h
SPBRGH_BRG11_LENGTH equ 0001h
SPBRGH_BRG11_MASK equ 0008h
SPBRGH_BRG12_POSN equ 0004h
SPBRGH_BRG12_POSITION equ 0004h
SPBRGH_BRG12_SIZE equ 0001h
SPBRGH_BRG12_LENGTH equ 0001h
SPBRGH_BRG12_MASK equ 0010h
SPBRGH_BRG13_POSN equ 0005h
SPBRGH_BRG13_POSITION equ 0005h
SPBRGH_BRG13_SIZE equ 0001h
SPBRGH_BRG13_LENGTH equ 0001h
SPBRGH_BRG13_MASK equ 0020h
SPBRGH_BRG14_POSN equ 0006h
SPBRGH_BRG14_POSITION equ 0006h
SPBRGH_BRG14_SIZE equ 0001h
SPBRGH_BRG14_LENGTH equ 0001h
SPBRGH_BRG14_MASK equ 0040h
SPBRGH_BRG15_POSN equ 0007h
SPBRGH_BRG15_POSITION equ 0007h
SPBRGH_BRG15_SIZE equ 0001h
SPBRGH_BRG15_LENGTH equ 0001h
SPBRGH_BRG15_MASK equ 0080h



PWM1CON equ 009Bh

PWM1CON_PDC_POSN equ 0000h
PWM1CON_PDC_POSITION equ 0000h
PWM1CON_PDC_SIZE equ 0007h
PWM1CON_PDC_LENGTH equ 0007h
PWM1CON_PDC_MASK equ 007Fh
PWM1CON_PRSEN_POSN equ 0007h
PWM1CON_PRSEN_POSITION equ 0007h
PWM1CON_PRSEN_SIZE equ 0001h
PWM1CON_PRSEN_LENGTH equ 0001h
PWM1CON_PRSEN_MASK equ 0080h
PWM1CON_PDC0_POSN equ 0000h
PWM1CON_PDC0_POSITION equ 0000h
PWM1CON_PDC0_SIZE equ 0001h
PWM1CON_PDC0_LENGTH equ 0001h
PWM1CON_PDC0_MASK equ 0001h
PWM1CON_PDC1_POSN equ 0001h
PWM1CON_PDC1_POSITION equ 0001h
PWM1CON_PDC1_SIZE equ 0001h
PWM1CON_PDC1_LENGTH equ 0001h
PWM1CON_PDC1_MASK equ 0002h
PWM1CON_PDC2_POSN equ 0002h
PWM1CON_PDC2_POSITION equ 0002h
PWM1CON_PDC2_SIZE equ 0001h
PWM1CON_PDC2_LENGTH equ 0001h
PWM1CON_PDC2_MASK equ 0004h
PWM1CON_PDC3_POSN equ 0003h
PWM1CON_PDC3_POSITION equ 0003h
PWM1CON_PDC3_SIZE equ 0001h
PWM1CON_PDC3_LENGTH equ 0001h
PWM1CON_PDC3_MASK equ 0008h
PWM1CON_PDC4_POSN equ 0004h
PWM1CON_PDC4_POSITION equ 0004h
PWM1CON_PDC4_SIZE equ 0001h
PWM1CON_PDC4_LENGTH equ 0001h
PWM1CON_PDC4_MASK equ 0010h
PWM1CON_PDC5_POSN equ 0005h
PWM1CON_PDC5_POSITION equ 0005h
PWM1CON_PDC5_SIZE equ 0001h
PWM1CON_PDC5_LENGTH equ 0001h
PWM1CON_PDC5_MASK equ 0020h
PWM1CON_PDC6_POSN equ 0006h
PWM1CON_PDC6_POSITION equ 0006h
PWM1CON_PDC6_SIZE equ 0001h
PWM1CON_PDC6_LENGTH equ 0001h
PWM1CON_PDC6_MASK equ 0040h



ECCPAS equ 009Ch

ECCPAS_PSSBD_POSN equ 0000h
ECCPAS_PSSBD_POSITION equ 0000h
ECCPAS_PSSBD_SIZE equ 0002h
ECCPAS_PSSBD_LENGTH equ 0002h
ECCPAS_PSSBD_MASK equ 0003h
ECCPAS_PSSAC_POSN equ 0002h
ECCPAS_PSSAC_POSITION equ 0002h
ECCPAS_PSSAC_SIZE equ 0002h
ECCPAS_PSSAC_LENGTH equ 0002h
ECCPAS_PSSAC_MASK equ 000Ch
ECCPAS_ECCPAS_POSN equ 0004h
ECCPAS_ECCPAS_POSITION equ 0004h
ECCPAS_ECCPAS_SIZE equ 0003h
ECCPAS_ECCPAS_LENGTH equ 0003h
ECCPAS_ECCPAS_MASK equ 0070h
ECCPAS_ECCPASE_POSN equ 0007h
ECCPAS_ECCPASE_POSITION equ 0007h
ECCPAS_ECCPASE_SIZE equ 0001h
ECCPAS_ECCPASE_LENGTH equ 0001h
ECCPAS_ECCPASE_MASK equ 0080h
ECCPAS_PSSBD0_POSN equ 0000h
ECCPAS_PSSBD0_POSITION equ 0000h
ECCPAS_PSSBD0_SIZE equ 0001h
ECCPAS_PSSBD0_LENGTH equ 0001h
ECCPAS_PSSBD0_MASK equ 0001h
ECCPAS_PSSBD1_POSN equ 0001h
ECCPAS_PSSBD1_POSITION equ 0001h
ECCPAS_PSSBD1_SIZE equ 0001h
ECCPAS_PSSBD1_LENGTH equ 0001h
ECCPAS_PSSBD1_MASK equ 0002h
ECCPAS_PSSAC0_POSN equ 0002h
ECCPAS_PSSAC0_POSITION equ 0002h
ECCPAS_PSSAC0_SIZE equ 0001h
ECCPAS_PSSAC0_LENGTH equ 0001h
ECCPAS_PSSAC0_MASK equ 0004h
ECCPAS_PSSAC1_POSN equ 0003h
ECCPAS_PSSAC1_POSITION equ 0003h
ECCPAS_PSSAC1_SIZE equ 0001h
ECCPAS_PSSAC1_LENGTH equ 0001h
ECCPAS_PSSAC1_MASK equ 0008h
ECCPAS_ECCPAS0_POSN equ 0004h
ECCPAS_ECCPAS0_POSITION equ 0004h
ECCPAS_ECCPAS0_SIZE equ 0001h
ECCPAS_ECCPAS0_LENGTH equ 0001h
ECCPAS_ECCPAS0_MASK equ 0010h
ECCPAS_ECCPAS1_POSN equ 0005h
ECCPAS_ECCPAS1_POSITION equ 0005h
ECCPAS_ECCPAS1_SIZE equ 0001h
ECCPAS_ECCPAS1_LENGTH equ 0001h
ECCPAS_ECCPAS1_MASK equ 0020h
ECCPAS_ECCPAS2_POSN equ 0006h
ECCPAS_ECCPAS2_POSITION equ 0006h
ECCPAS_ECCPAS2_SIZE equ 0001h
ECCPAS_ECCPAS2_LENGTH equ 0001h
ECCPAS_ECCPAS2_MASK equ 0040h



PSTRCON equ 009Dh

PSTRCON_STRA_POSN equ 0000h
PSTRCON_STRA_POSITION equ 0000h
PSTRCON_STRA_SIZE equ 0001h
PSTRCON_STRA_LENGTH equ 0001h
PSTRCON_STRA_MASK equ 0001h
PSTRCON_STRB_POSN equ 0001h
PSTRCON_STRB_POSITION equ 0001h
PSTRCON_STRB_SIZE equ 0001h
PSTRCON_STRB_LENGTH equ 0001h
PSTRCON_STRB_MASK equ 0002h
PSTRCON_STRC_POSN equ 0002h
PSTRCON_STRC_POSITION equ 0002h
PSTRCON_STRC_SIZE equ 0001h
PSTRCON_STRC_LENGTH equ 0001h
PSTRCON_STRC_MASK equ 0004h
PSTRCON_STRD_POSN equ 0003h
PSTRCON_STRD_POSITION equ 0003h
PSTRCON_STRD_SIZE equ 0001h
PSTRCON_STRD_LENGTH equ 0001h
PSTRCON_STRD_MASK equ 0008h
PSTRCON_STRSYNC_POSN equ 0004h
PSTRCON_STRSYNC_POSITION equ 0004h
PSTRCON_STRSYNC_SIZE equ 0001h
PSTRCON_STRSYNC_LENGTH equ 0001h
PSTRCON_STRSYNC_MASK equ 0010h



ADRESL equ 009Eh



ADCON1 equ 009Fh

ADCON1_VCFG0_POSN equ 0004h
ADCON1_VCFG0_POSITION equ 0004h
ADCON1_VCFG0_SIZE equ 0001h
ADCON1_VCFG0_LENGTH equ 0001h
ADCON1_VCFG0_MASK equ 0010h
ADCON1_VCFG1_POSN equ 0005h
ADCON1_VCFG1_POSITION equ 0005h
ADCON1_VCFG1_SIZE equ 0001h
ADCON1_VCFG1_LENGTH equ 0001h
ADCON1_VCFG1_MASK equ 0020h
ADCON1_ADFM_POSN equ 0007h
ADCON1_ADFM_POSITION equ 0007h
ADCON1_ADFM_SIZE equ 0001h
ADCON1_ADFM_LENGTH equ 0001h
ADCON1_ADFM_MASK equ 0080h



WDTCON equ 0105h

WDTCON_SWDTEN_POSN equ 0000h
WDTCON_SWDTEN_POSITION equ 0000h
WDTCON_SWDTEN_SIZE equ 0001h
WDTCON_SWDTEN_LENGTH equ 0001h
WDTCON_SWDTEN_MASK equ 0001h
WDTCON_WDTPS_POSN equ 0001h
WDTCON_WDTPS_POSITION equ 0001h
WDTCON_WDTPS_SIZE equ 0004h
WDTCON_WDTPS_LENGTH equ 0004h
WDTCON_WDTPS_MASK equ 001Eh
WDTCON_WDTPS0_POSN equ 0001h
WDTCON_WDTPS0_POSITION equ 0001h
WDTCON_WDTPS0_SIZE equ 0001h
WDTCON_WDTPS0_LENGTH equ 0001h
WDTCON_WDTPS0_MASK equ 0002h
WDTCON_WDTPS1_POSN equ 0002h
WDTCON_WDTPS1_POSITION equ 0002h
WDTCON_WDTPS1_SIZE equ 0001h
WDTCON_WDTPS1_LENGTH equ 0001h
WDTCON_WDTPS1_MASK equ 0004h
WDTCON_WDTPS2_POSN equ 0003h
WDTCON_WDTPS2_POSITION equ 0003h
WDTCON_WDTPS2_SIZE equ 0001h
WDTCON_WDTPS2_LENGTH equ 0001h
WDTCON_WDTPS2_MASK equ 0008h
WDTCON_WDTPS3_POSN equ 0004h
WDTCON_WDTPS3_POSITION equ 0004h
WDTCON_WDTPS3_SIZE equ 0001h
WDTCON_WDTPS3_LENGTH equ 0001h
WDTCON_WDTPS3_MASK equ 0010h



CM1CON0 equ 0107h

CM1CON0_C1CH_POSN equ 0000h
CM1CON0_C1CH_POSITION equ 0000h
CM1CON0_C1CH_SIZE equ 0002h
CM1CON0_C1CH_LENGTH equ 0002h
CM1CON0_C1CH_MASK equ 0003h
CM1CON0_C1R_POSN equ 0002h
CM1CON0_C1R_POSITION equ 0002h
CM1CON0_C1R_SIZE equ 0001h
CM1CON0_C1R_LENGTH equ 0001h
CM1CON0_C1R_MASK equ 0004h
CM1CON0_C1POL_POSN equ 0004h
CM1CON0_C1POL_POSITION equ 0004h
CM1CON0_C1POL_SIZE equ 0001h
CM1CON0_C1POL_LENGTH equ 0001h
CM1CON0_C1POL_MASK equ 0010h
CM1CON0_C1OE_POSN equ 0005h
CM1CON0_C1OE_POSITION equ 0005h
CM1CON0_C1OE_SIZE equ 0001h
CM1CON0_C1OE_LENGTH equ 0001h
CM1CON0_C1OE_MASK equ 0020h
CM1CON0_C1OUT_POSN equ 0006h
CM1CON0_C1OUT_POSITION equ 0006h
CM1CON0_C1OUT_SIZE equ 0001h
CM1CON0_C1OUT_LENGTH equ 0001h
CM1CON0_C1OUT_MASK equ 0040h
CM1CON0_C1ON_POSN equ 0007h
CM1CON0_C1ON_POSITION equ 0007h
CM1CON0_C1ON_SIZE equ 0001h
CM1CON0_C1ON_LENGTH equ 0001h
CM1CON0_C1ON_MASK equ 0080h
CM1CON0_C1CH0_POSN equ 0000h
CM1CON0_C1CH0_POSITION equ 0000h
CM1CON0_C1CH0_SIZE equ 0001h
CM1CON0_C1CH0_LENGTH equ 0001h
CM1CON0_C1CH0_MASK equ 0001h
CM1CON0_C1CH1_POSN equ 0001h
CM1CON0_C1CH1_POSITION equ 0001h
CM1CON0_C1CH1_SIZE equ 0001h
CM1CON0_C1CH1_LENGTH equ 0001h
CM1CON0_C1CH1_MASK equ 0002h



CM2CON0 equ 0108h

CM2CON0_C2CH_POSN equ 0000h
CM2CON0_C2CH_POSITION equ 0000h
CM2CON0_C2CH_SIZE equ 0002h
CM2CON0_C2CH_LENGTH equ 0002h
CM2CON0_C2CH_MASK equ 0003h
CM2CON0_C2R_POSN equ 0002h
CM2CON0_C2R_POSITION equ 0002h
CM2CON0_C2R_SIZE equ 0001h
CM2CON0_C2R_LENGTH equ 0001h
CM2CON0_C2R_MASK equ 0004h
CM2CON0_C2POL_POSN equ 0004h
CM2CON0_C2POL_POSITION equ 0004h
CM2CON0_C2POL_SIZE equ 0001h
CM2CON0_C2POL_LENGTH equ 0001h
CM2CON0_C2POL_MASK equ 0010h
CM2CON0_C2OE_POSN equ 0005h
CM2CON0_C2OE_POSITION equ 0005h
CM2CON0_C2OE_SIZE equ 0001h
CM2CON0_C2OE_LENGTH equ 0001h
CM2CON0_C2OE_MASK equ 0020h
CM2CON0_C2OUT_POSN equ 0006h
CM2CON0_C2OUT_POSITION equ 0006h
CM2CON0_C2OUT_SIZE equ 0001h
CM2CON0_C2OUT_LENGTH equ 0001h
CM2CON0_C2OUT_MASK equ 0040h
CM2CON0_C2ON_POSN equ 0007h
CM2CON0_C2ON_POSITION equ 0007h
CM2CON0_C2ON_SIZE equ 0001h
CM2CON0_C2ON_LENGTH equ 0001h
CM2CON0_C2ON_MASK equ 0080h
CM2CON0_C2CH0_POSN equ 0000h
CM2CON0_C2CH0_POSITION equ 0000h
CM2CON0_C2CH0_SIZE equ 0001h
CM2CON0_C2CH0_LENGTH equ 0001h
CM2CON0_C2CH0_MASK equ 0001h
CM2CON0_C2CH1_POSN equ 0001h
CM2CON0_C2CH1_POSITION equ 0001h
CM2CON0_C2CH1_SIZE equ 0001h
CM2CON0_C2CH1_LENGTH equ 0001h
CM2CON0_C2CH1_MASK equ 0002h



CM2CON1 equ 0109h

CM2CON1_C2SYNC_POSN equ 0000h
CM2CON1_C2SYNC_POSITION equ 0000h
CM2CON1_C2SYNC_SIZE equ 0001h
CM2CON1_C2SYNC_LENGTH equ 0001h
CM2CON1_C2SYNC_MASK equ 0001h
CM2CON1_T1GSS_POSN equ 0001h
CM2CON1_T1GSS_POSITION equ 0001h
CM2CON1_T1GSS_SIZE equ 0001h
CM2CON1_T1GSS_LENGTH equ 0001h
CM2CON1_T1GSS_MASK equ 0002h
CM2CON1_C2RSEL_POSN equ 0004h
CM2CON1_C2RSEL_POSITION equ 0004h
CM2CON1_C2RSEL_SIZE equ 0001h
CM2CON1_C2RSEL_LENGTH equ 0001h
CM2CON1_C2RSEL_MASK equ 0010h
CM2CON1_C1RSEL_POSN equ 0005h
CM2CON1_C1RSEL_POSITION equ 0005h
CM2CON1_C1RSEL_SIZE equ 0001h
CM2CON1_C1RSEL_LENGTH equ 0001h
CM2CON1_C1RSEL_MASK equ 0020h
CM2CON1_MC2OUT_POSN equ 0006h
CM2CON1_MC2OUT_POSITION equ 0006h
CM2CON1_MC2OUT_SIZE equ 0001h
CM2CON1_MC2OUT_LENGTH equ 0001h
CM2CON1_MC2OUT_MASK equ 0040h
CM2CON1_MC1OUT_POSN equ 0007h
CM2CON1_MC1OUT_POSITION equ 0007h
CM2CON1_MC1OUT_SIZE equ 0001h
CM2CON1_MC1OUT_LENGTH equ 0001h
CM2CON1_MC1OUT_MASK equ 0080h



EEDATA equ 010Ch



EEADR equ 010Dh



EEDATH equ 010Eh



EEADRH equ 010Fh



SRCON equ 0185h

SRCON_FVREN_POSN equ 0000h
SRCON_FVREN_POSITION equ 0000h
SRCON_FVREN_SIZE equ 0001h
SRCON_FVREN_LENGTH equ 0001h
SRCON_FVREN_MASK equ 0001h
SRCON_PULSR_POSN equ 0002h
SRCON_PULSR_POSITION equ 0002h
SRCON_PULSR_SIZE equ 0001h
SRCON_PULSR_LENGTH equ 0001h
SRCON_PULSR_MASK equ 0004h
SRCON_PULSS_POSN equ 0003h
SRCON_PULSS_POSITION equ 0003h
SRCON_PULSS_SIZE equ 0001h
SRCON_PULSS_LENGTH equ 0001h
SRCON_PULSS_MASK equ 0008h
SRCON_C2REN_POSN equ 0004h
SRCON_C2REN_POSITION equ 0004h
SRCON_C2REN_SIZE equ 0001h
SRCON_C2REN_LENGTH equ 0001h
SRCON_C2REN_MASK equ 0010h
SRCON_C1SEN_POSN equ 0005h
SRCON_C1SEN_POSITION equ 0005h
SRCON_C1SEN_SIZE equ 0001h
SRCON_C1SEN_LENGTH equ 0001h
SRCON_C1SEN_MASK equ 0020h
SRCON_SR0_POSN equ 0006h
SRCON_SR0_POSITION equ 0006h
SRCON_SR0_SIZE equ 0001h
SRCON_SR0_LENGTH equ 0001h
SRCON_SR0_MASK equ 0040h
SRCON_SR1_POSN equ 0007h
SRCON_SR1_POSITION equ 0007h
SRCON_SR1_SIZE equ 0001h
SRCON_SR1_LENGTH equ 0001h
SRCON_SR1_MASK equ 0080h



BAUDCTL equ 0187h

BAUDCTL_ABDEN_POSN equ 0000h
BAUDCTL_ABDEN_POSITION equ 0000h
BAUDCTL_ABDEN_SIZE equ 0001h
BAUDCTL_ABDEN_LENGTH equ 0001h
BAUDCTL_ABDEN_MASK equ 0001h
BAUDCTL_WUE_POSN equ 0001h
BAUDCTL_WUE_POSITION equ 0001h
BAUDCTL_WUE_SIZE equ 0001h
BAUDCTL_WUE_LENGTH equ 0001h
BAUDCTL_WUE_MASK equ 0002h
BAUDCTL_BRG16_POSN equ 0003h
BAUDCTL_BRG16_POSITION equ 0003h
BAUDCTL_BRG16_SIZE equ 0001h
BAUDCTL_BRG16_LENGTH equ 0001h
BAUDCTL_BRG16_MASK equ 0008h
BAUDCTL_SCKP_POSN equ 0004h
BAUDCTL_SCKP_POSITION equ 0004h
BAUDCTL_SCKP_SIZE equ 0001h
BAUDCTL_SCKP_LENGTH equ 0001h
BAUDCTL_SCKP_MASK equ 0010h
BAUDCTL_RCIDL_POSN equ 0006h
BAUDCTL_RCIDL_POSITION equ 0006h
BAUDCTL_RCIDL_SIZE equ 0001h
BAUDCTL_RCIDL_LENGTH equ 0001h
BAUDCTL_RCIDL_MASK equ 0040h
BAUDCTL_ABDOVF_POSN equ 0007h
BAUDCTL_ABDOVF_POSITION equ 0007h
BAUDCTL_ABDOVF_SIZE equ 0001h
BAUDCTL_ABDOVF_LENGTH equ 0001h
BAUDCTL_ABDOVF_MASK equ 0080h



ANSEL equ 0188h

ANSEL_ANS0_POSN equ 0000h
ANSEL_ANS0_POSITION equ 0000h
ANSEL_ANS0_SIZE equ 0001h
ANSEL_ANS0_LENGTH equ 0001h
ANSEL_ANS0_MASK equ 0001h
ANSEL_ANS1_POSN equ 0001h
ANSEL_ANS1_POSITION equ 0001h
ANSEL_ANS1_SIZE equ 0001h
ANSEL_ANS1_LENGTH equ 0001h
ANSEL_ANS1_MASK equ 0002h
ANSEL_ANS2_POSN equ 0002h
ANSEL_ANS2_POSITION equ 0002h
ANSEL_ANS2_SIZE equ 0001h
ANSEL_ANS2_LENGTH equ 0001h
ANSEL_ANS2_MASK equ 0004h
ANSEL_ANS3_POSN equ 0003h
ANSEL_ANS3_POSITION equ 0003h
ANSEL_ANS3_SIZE equ 0001h
ANSEL_ANS3_LENGTH equ 0001h
ANSEL_ANS3_MASK equ 0008h
ANSEL_ANS4_POSN equ 0004h
ANSEL_ANS4_POSITION equ 0004h
ANSEL_ANS4_SIZE equ 0001h
ANSEL_ANS4_LENGTH equ 0001h
ANSEL_ANS4_MASK equ 0010h
ANSEL_ANS5_POSN equ 0005h
ANSEL_ANS5_POSITION equ 0005h
ANSEL_ANS5_SIZE equ 0001h
ANSEL_ANS5_LENGTH equ 0001h
ANSEL_ANS5_MASK equ 0020h
ANSEL_ANS6_POSN equ 0006h
ANSEL_ANS6_POSITION equ 0006h
ANSEL_ANS6_SIZE equ 0001h
ANSEL_ANS6_LENGTH equ 0001h
ANSEL_ANS6_MASK equ 0040h
ANSEL_ANS7_POSN equ 0007h
ANSEL_ANS7_POSITION equ 0007h
ANSEL_ANS7_SIZE equ 0001h
ANSEL_ANS7_LENGTH equ 0001h
ANSEL_ANS7_MASK equ 0080h



ANSELH equ 0189h

ANSELH_ANS8_POSN equ 0000h
ANSELH_ANS8_POSITION equ 0000h
ANSELH_ANS8_SIZE equ 0001h
ANSELH_ANS8_LENGTH equ 0001h
ANSELH_ANS8_MASK equ 0001h
ANSELH_ANS9_POSN equ 0001h
ANSELH_ANS9_POSITION equ 0001h
ANSELH_ANS9_SIZE equ 0001h
ANSELH_ANS9_LENGTH equ 0001h
ANSELH_ANS9_MASK equ 0002h
ANSELH_ANS10_POSN equ 0002h
ANSELH_ANS10_POSITION equ 0002h
ANSELH_ANS10_SIZE equ 0001h
ANSELH_ANS10_LENGTH equ 0001h
ANSELH_ANS10_MASK equ 0004h
ANSELH_ANS11_POSN equ 0003h
ANSELH_ANS11_POSITION equ 0003h
ANSELH_ANS11_SIZE equ 0001h
ANSELH_ANS11_LENGTH equ 0001h
ANSELH_ANS11_MASK equ 0008h
ANSELH_ANS12_POSN equ 0004h
ANSELH_ANS12_POSITION equ 0004h
ANSELH_ANS12_SIZE equ 0001h
ANSELH_ANS12_LENGTH equ 0001h
ANSELH_ANS12_MASK equ 0010h
ANSELH_ANS13_POSN equ 0005h
ANSELH_ANS13_POSITION equ 0005h
ANSELH_ANS13_SIZE equ 0001h
ANSELH_ANS13_LENGTH equ 0001h
ANSELH_ANS13_MASK equ 0020h



EECON1 equ 018Ch

EECON1_RD_POSN equ 0000h
EECON1_RD_POSITION equ 0000h
EECON1_RD_SIZE equ 0001h
EECON1_RD_LENGTH equ 0001h
EECON1_RD_MASK equ 0001h
EECON1_WR_POSN equ 0001h
EECON1_WR_POSITION equ 0001h
EECON1_WR_SIZE equ 0001h
EECON1_WR_LENGTH equ 0001h
EECON1_WR_MASK equ 0002h
EECON1_WREN_POSN equ 0002h
EECON1_WREN_POSITION equ 0002h
EECON1_WREN_SIZE equ 0001h
EECON1_WREN_LENGTH equ 0001h
EECON1_WREN_MASK equ 0004h
EECON1_WRERR_POSN equ 0003h
EECON1_WRERR_POSITION equ 0003h
EECON1_WRERR_SIZE equ 0001h
EECON1_WRERR_LENGTH equ 0001h
EECON1_WRERR_MASK equ 0008h
EECON1_EEPGD_POSN equ 0007h
EECON1_EEPGD_POSITION equ 0007h
EECON1_EEPGD_SIZE equ 0001h
EECON1_EEPGD_LENGTH equ 0001h
EECON1_EEPGD_MASK equ 0080h



EECON2 equ 018Dh
# 2819 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\proc\\pic16f887.inc" 3
psect udata_shr,class=COMMON,space=1,noexec
psect udata,class=RAM,space=1,noexec
psect udata_bank0,class=BANK0,space=1,noexec
psect udata_bank1,class=BANK1,space=1,noexec
psect udata_bank2,class=BANK2,space=1,noexec
psect udata_bank3,class=BANK3,space=1,noexec
psect code,class=CODE,space=0,delta=2
psect data,class=STRCODE,space=0,delta=2,noexec
psect edata,class=EEDATA,space=3,delta=2,noexec
# 2774 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\pic_as_chip_select.inc" 2 3
# 4 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\pic.inc" 2 3




stk_offset SET 0
auto_size SET 0


; stack_auto defines a symbol /name/_offset which equates to the
; stack offset of the auto object in question

stack_auto MACRO name, size
name&_offset EQU stk_offset-size
stk_offset SET name&_offset
auto_size SET -stk_offset
ENDM


; stack_param defines a symbol /name/_offset which equates to the
; stack offset of the parameter object in question

stack_param MACRO name, size
name&_offset EQU stk_offset-size
stk_offset SET name&_offset
ENDM


; alloc_stack adjusts the SP to allocate space for auto objects
; it also links in to the btemp symbol so that can be used

alloc_stack MACRO
GLOBAL btemp
addfsr FSR1,auto_size
ENDM


; restore_stack adjusts the SP to remove all auto and parameter
; objects from the stack prior to returning from a function

restore_stack MACRO
addfsr FSR1,stk_offset
stk_offset SET 0
auto_size SET 0
ENDM
# 7 "C:\\Program Files\\Microchip\\xc8\\v2.35\\pic\\include\\xc.inc" 2 3
# 16 "main.s" 2
 ; CONFIG1
 CONFIG FOSC = INTRC_NOCLKOUT ; Oscillator Selection bits (INTOSCIO oscillator: I/O function on ((PORTA) and 07Fh), 6/OSC2/CLKOUT pin, I/O function on ((PORTA) and 07Fh), 7/OSC1/CLKIN)
 CONFIG WDTE = OFF ; Watchdog Timer Enable bit (WDT disabled and can be enabled by ((WDTCON) and 07Fh), 0 bit of the WDTCON register)
 CONFIG PWRTE = OFF ; Power-up Timer Enable bit (PWRT enabled)
 CONFIG MCLRE = OFF ; ((PORTE) and 07Fh), 3/MCLR pin function select bit (((PORTE) and 07Fh), 3/MCLR pin function is digital input, MCLR internally tied to VDD)
 CONFIG CP = OFF ; Code Protection bit (Program memory code protection is disabled)
 CONFIG CPD = OFF ; Data Code Protection bit (Data memory code protection is disabled)
 CONFIG BOREN = OFF ; Brown Out Reset Selection bits (BOR disabled)
 CONFIG IESO = OFF ; Internal External Switchover bit (Internal/External Switchover mode is disabled)
 CONFIG FCMEN = OFF ; Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
 CONFIG LVP = OFF ; Low Voltage Programming Enable bit (((PORTB) and 07Fh), 3/PGM pin has PGM function, low voltage programming enabled)
    ; CONFIG2
 CONFIG BOR4V = BOR40V ; Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
 CONFIG WRT = OFF ; Flash Program Memory Self Write Enable bits (Write protection off)

    ;------------------------------- MACROS ------------------------------------
    ; MACRO PARA TIMER0
    RESET_TIMER0 MACRO VALOR_TIMER
 BANKSEL TMR0 ; Direccionamiento de banco
 MOVLW VALOR_TIMER ; Almacenamiento de literal en registro W
 MOVWF TMR0 ; Carga del valor del resgitro W al registro TMR0
 BCF ((INTCON) and 07Fh), 2 ; Limpieza de bandera
 ENDM
    ; MACRO PARA TIMER1
    RESET_TIMER1 MACRO TMR1_H, TMR1_L
 BANKSEL TMR1H ; Direccionamiento de banco
 MOVLW TMR1_H ; Almacenamiento de primer literal en registro W
 MOVWF TMR1H ; Cargar el valor del resgitro W al registro TMR1H
 MOVLW TMR1_L ; Almacenamiento de segundo literal en registro W
 MOVWF TMR1L ; Carga del valor del resgitro W al registro TMR1L
 BCF ((PIR1) and 07Fh), 0 ; Limpieza de bandera
 ENDM
    ; MACRO PARA ACCIONAR LOS DISPLAYS SEGUN MODO
    ACCION MACRO VALOR0, VALOR1, VALOR2, VALOR3, VALOR4, VALOR5
 MOVF VALOR0, W ; Enviar VALOR0 a W (Correspondiente a primer display)
 MOVWF VALOR ; Cargar W al byte 0 de la variable VALOR
 MOVF VALOR1, W ; Enviar VALOR1 a W (Correspondiente a segundo display)
 MOVWF VALOR+1 ; Cargar W al byte 1 de la variable VALOR
 MOVF VALOR2, W ; Enviar VALOR2 a W (Correspondiente a tercer display)
 MOVWF VALOR+2 ; Cargar W al byte 2 de la variable VALOR
 MOVF VALOR3, W ; Enviar VALOR3 a W (Correspondiente a cuarto display)
 MOVWF VALOR+3 ; Cargar W al byte 3 de la variable VALOR
 MOVF VALOR4, W ; Enviar VALOR4 a W (Correspondiente a quinto display)
 MOVWF VALOR+4 ; Cargar W al byte 4 de la variable VALOR
 MOVF VALOR5, W ; Enviar VALOR5 a W (Correspondiente a sexto display)
 MOVWF VALOR+5 ; Cargar W al byte 5 de la variable VALOR
 ENDM
    ; MACRO PARA COLOCAR LOS VALORES INICIALES DE CADA MODO
    CARGAR_VALOR MACRO REGISTRO, VALOR
 MOVLW VALOR ; Enviar literal a registro W
 MOVWF REGISTRO ; Cargar valor de W al registro indicado
 ENDM
    ;------------------------- VALORES EN MEMORIA ------------------------------
    ; Variables de almacenamiento temporal de registros W y STATUS durante interrupciones
    PSECT udata_shr ; Memoria compartida
 W_TEMP: DS 1 ; Almacenamiento temporal del registro W
 STATUS_TEMP: DS 1 ; Almacenamiento temporal del registro STATUS
    ; Variables globales
    PSECT udata_bank0 ; Memoria común
    ; Variables para configuración general
 BANDERA_D: DS 1 ; Bandera de selección de display
 DISPLAY: DS 6 ; Almacenamiento del valor en binario a mostrar en display
 VALOR: DS 6 ; Almacenamiento del valor en decimal a mostrar en display
 MODO: DS 1 ; Indicador del modo activo
 BANDERA_M: DS 1 ; Bandera de selección de acción en cada modo
 DISPLAY_EDIT: DS 1 ; Indicador de display en edición
    ; Variables para configurar los distintos modos
 CONT_HORA: DS 6 ; Almacenamiento del valor de la hora
 BANDERA_H: DS 1 ; Bandera para funciones de la hora
 CONT_FECHA: DS 6 ; Almacenamiento del valor de la fecha
 BANDERA_F: DS 1 ; Bandera para funciones de la fecha
 CONT_TEMP: DS 6 ; Almacenamiento del valor del temporizador
 BANDERA_T: DS 1 ; Bandera para funciones del temporizador
 DURACION: DS 1
 CONT_CRONO: DS 6 ; Almacenamiento del valor de la cronómetro
 BANDERA_C: DS 1 ; Bandera para funciones de cronómetro
    ;-------------------------- VECTOR RESET -----------------------------------
    PSECT resVect, class=CODE, abs, delta=2
    ORG 00h ; Posición 0000h para el reset
    resetVec:
        PAGESEL main ; Cambio de pagina
        goto main
    ;-------------------- SUBRUTINAS DE INTERRUPCION ---------------------------
    PSECT intVect, class=CODE, abs, delta=2
    ORG 04h ; Posición 0004h para las interrupciones
    PUSH:
 MOVWF W_TEMP ; Almacenamiento temporal del registro W
 SWAPF STATUS, W ; SWAP de nibbles de registro STATUS y almacenamiento en W
 MOVWF STATUS_TEMP ; Almacenamiento temporal del registro STATUS
    ISR:
 ; Interrupción por TIMER0
 BTFSC ((INTCON) and 07Fh), 2 ; Verificación de interrupción en el TIMER0
 CALL INT_TMR0 ; Subrutina INT_TMR0
 ; Interrupción por TIMER1
 BTFSC ((PIR1) and 07Fh), 0 ; Verificación de interrupción en el TIMER1
 CALL INT_TMR1 ; Subrutina INT_TMR1
 ; Interrupción por TIMER2
 BTFSC ((PIR1) and 07Fh), 1 ; Verificación de interrupción en el TIMER2
 CALL INT_TMR2 ; Subrutina INT_TMR2
 ; Interrupción por PORTB
 BTFSC ((INTCON) and 07Fh), 0 ; Verificación de interrupción por cambio de valor en PORTB
 CALL INT_B ; Subrutina INT_B
    POP:
 SWAPF STATUS_TEMP, W ; SWAP de nibbles del valor temporal del registro STATUS
 MOVWF STATUS ; Recuperación del valor temporal almacenado para el registro STATUS
 SWAPF W_TEMP, F ; SWAP de nibbles del valor temporal del registro W
 SWAPF W_TEMP, W ; SWAP de nibbles y recuperación del valor temporal del registro W
 RETFIE

    ;------------------------ RUTINAS PRINCIPALES ------------------------------
    PSECT code, delta=2, abs
    ORG 100h ; posición 100h para el codigo
    main:
 CALL CONFIG_IO ; Configuración de puertos
 CALL CONFIG_CLK ; Configuración de oscilador
 CALL CONIFG_INTERRUPT ; Configuración de interrupciones
 CALL CONFIG_INT_PORTB ; Configuración de interrupción en PORTB (Verificar utilidad)
 CALL CONFIG_TIMER0 ; Configuración de TMR0
 CALL CONFIG_TIMER1 ; Configuración de TMR1
 CALL CONFIG_TIMER2 ; Configuración de TMR2
 BANKSEL PORTA ; Direccionamiento de banco
 CALL LIMPIEZADEVARIABLES ; Subrutina para la limpieza de variables
 BSF MODO, 0 ; Activación de bit 0 (Inicio de modo reloj automático)
 CALL INT_B ; Iniciación de reloj en modo HORA
 BCF PORTA, 5
 ; CONFIGURACIÓN DE VALORES INICIALES A LOS CONTADORES
 CARGAR_VALOR CONT_HORA, 0
 CARGAR_VALOR CONT_HORA+1, 0
 CARGAR_VALOR CONT_HORA+2, 0
 CARGAR_VALOR CONT_HORA+3, 0
 CARGAR_VALOR CONT_HORA+4, 0
 CARGAR_VALOR CONT_HORA+5, 0
 CARGAR_VALOR CONT_FECHA, 0
 CARGAR_VALOR CONT_FECHA+1, 0
 CARGAR_VALOR CONT_FECHA+2, 0
 CARGAR_VALOR CONT_FECHA+3, 0
 CARGAR_VALOR CONT_FECHA+4, 0
 CARGAR_VALOR CONT_FECHA+5, 0
 CARGAR_VALOR CONT_TEMP, 0
 CARGAR_VALOR CONT_TEMP+1, 0
 CARGAR_VALOR CONT_TEMP+2, 0
 CARGAR_VALOR CONT_TEMP+3, 0
 CARGAR_VALOR CONT_TEMP+4, 0
 CARGAR_VALOR CONT_TEMP+5, 0
 CARGAR_VALOR CONT_CRONO, 0
 CARGAR_VALOR CONT_CRONO+1, 0
 CARGAR_VALOR CONT_CRONO+2, 0
 CARGAR_VALOR CONT_CRONO+3, 0
 CARGAR_VALOR CONT_CRONO+4, 0
 CARGAR_VALOR CONT_CRONO+5, 0

    loop:
 ; Verificación de bandera de modo
 BTFSC BANDERA_M, 0 ; Verificación de bit 0 de BANDERA_M (Modo hora)
 CALL ACCION_HORA ; Subrutina para accionar el modo hora
 BTFSC BANDERA_M, 1 ; Verificación de bit 1 de BANDERA_M (Modo fecha)
 CALL ACCION_FECHA ; Subrutina para accionar el modo fecha
 BTFSC BANDERA_M, 2 ; Verificación de bit 2 de BANDERA_M (Modo temporizador)
 CALL ACCION_TEMPORIZADOR ; Subrutina para accionar el modo temporizador
 BTFSC BANDERA_M, 3 ; Verificación de bit 3 de BANDERA_M (Modo cronómetro)
 CALL ACCION_CRONOMETRO ; Subrutina para accionar el modo cronómetro
 CALL DIVISION_CRONOMETRO ; Subrutina de divisiones del modo cronómetro
 ; INSTRUCCIONES PARA LA CONFIGURACIÓN DEL MODO HORA
 BTFSC BANDERA_M, 4 ; Verificación de bit 4 de BANDERA_M (Modo hora)
 GOTO $+3
 CALL DIVISION_HORA ; Subrutina de divisiones del modo hora
 GOTO $+3
 CALL EDICION_RELOJ
 CALL ACCION_HORA ; Subrutina para accionar el modo hora
 ; INSTRUCCIONES PARA LA CONFIGURACIÓN DEL MODO FECHA
 BTFSC BANDERA_M, 5 ; Verificamos bandera 4
 GOTO $+3
 CALL DIVISION_FECHA ; Subrutina de divisiones del modo fecha
 GOTO $+3
 CALL EDICION_FECHA
 CALL ACCION_FECHA ; Subrutina para accionar el modo fecha
 ; INSTRUCCIONES PARA LA CONFIGURACIÓN DEL MODO TEMPORIZADOR
 BTFSC BANDERA_M, 6 ; Verificamos bandera 4
 GOTO $+3
 CALL DIVISION_TEMPORIZADOR ; Subrutina de divisiones del modo temporizador
 GOTO $+3
 CALL EDICION_TEMPORIZADOR
 CALL ACCION_TEMPORIZADOR ; Subrutina para accionar el modo temporizador
 CALL PREPARAR ; Subrutina que prepara los valores a mostrar en los displays
 GOTO loop ; Direccionar de nuevo al loop (ciclo infinito)

    ;------------------ SUBRUTINAS DE ACCIONES DE MODOS ------------------------
    ACCION_HORA:
 ACCION CONT_HORA, CONT_HORA+1, CONT_HORA+2, CONT_HORA+3, CONT_HORA+4, CONT_HORA+5
    RETURN
    ACCION_FECHA:
 ACCION CONT_FECHA, CONT_FECHA+1, CONT_FECHA+2, CONT_FECHA+3, CONT_FECHA+4, CONT_FECHA+5
    RETURN
    ACCION_TEMPORIZADOR:
 ACCION CONT_TEMP, CONT_TEMP+1, CONT_TEMP+2, CONT_TEMP+3, CONT_TEMP+4, CONT_TEMP+5
    RETURN
    ACCION_CRONOMETRO:
 ACCION CONT_CRONO, CONT_CRONO+1, CONT_CRONO+2, CONT_CRONO+3, CONT_CRONO+4, CONT_CRONO+5
    RETURN
    ;--------------------- SUBRUTINAS DE FSM DE MODOS --------------------------
    MODO_HORA:
 BTFSC PORTB, 4 ; ANTIREBOTE - BOTÓN 4 - CAMBIO DE MODO
 GOTO $+3
 BSF MODO, 1 ; Activar bit de MODO_FECHA
 BCF MODO, 0 ; Desactivar bit de MODO_HORA
 BTFSC PORTB, 2 ; ANTIREBOTE - BOTÓN 2 - EDICIÓN
 GOTO $+4
 BSF MODO, 4 ; Activar bit de MODO_CONFIGURAR_HORA
 BCF MODO, 0 ; Desactivar bit de MODO_HORA
 BSF DISPLAY_EDIT, 0 ; Activar bit 0 del registro indicador de display a editar
 BCF ((INTCON) and 07Fh), 0 ; Limpieza de la bandera de interrupción
 CLRF BANDERA_M ; Limpieza del registro BANDERA_M
 BSF BANDERA_M, 0 ; Activación del bit 0 del registro BANDERA_M
 BSF PORTA, 0 ; Encender bit 0 del PORTA (Salida de LEDS)
 BCF PORTA, 1 ; Apagar bit 1 del PORTA (Salida de LEDS)
 BCF PORTA, 2 ; Apagar bit 2 del PORTA (Salida de LEDS)
 BCF PORTA, 3 ; Apagar bit 3 del PORTA (Salida de LEDS)
 BCF PORTA, 4 ; Apagar bit 4 del PORTA (Salida de LEDS)
    RETURN
    MODO_FECHA:
 BTFSC PORTB, 4 ; ANTIREBOTE - BOTÓN 4 - CAMBIO DE MODO
 GOTO $+3
 BSF MODO, 2 ; Activar bit de MODO_FECHA
 BCF MODO, 1 ; Desactivar bit de MODO_HORA
 BTFSC PORTB, 2 ; ANTIREBOTE - BOTÓN 2 - EDICIÓN
 GOTO $+4
 BSF MODO, 5 ; Activar bit de MODO_CONFIGURAR_FECHA
 BCF MODO, 1 ; Desactivar bit de MODO_FECHA
 BSF DISPLAY_EDIT, 0
 BCF ((INTCON) and 07Fh), 0 ; Limpiamos bandera de interrupción
 CLRF BANDERA_M ; Limpieza del registro BANDERA_M
 BSF BANDERA_M, 1 ; Activación del bit 1 del registro BANDERA_M
 BCF PORTA, 0 ; Apagar bit 0 del PORTA (Salida de LEDS)
 BSF PORTA, 1 ; Encender bit 1 del PORTA (Salida de LEDS)
 BCF PORTA, 2 ; Apagar bit 2 del PORTA (Salida de LEDS)
 BCF PORTA, 3 ; Apagar bit 3 del PORTA (Salida de LEDS)
 BCF PORTA, 4 ; Apagar bit 4 del PORTA (Salida de LEDS)
    RETURN

    MODO_TEMPORIZADOR:
 BTFSC PORTB, 4 ; ANTIREBOTE - BOTÓN 4 - CAMBIO DE MODO
 GOTO $+3
 BSF MODO, 3 ; Activar bit de MODO_ALARMA
 BCF MODO, 2 ; Desactivar bit de MODO_TEMPORIZADOR
 BTFSC PORTB, 2 ; ANTIREBOTE - BOTÓN 2 - EDICIÓN
 GOTO $+6
 BTFSC BANDERA_T, 5
 GOTO $+4
 BSF MODO, 6 ; Activar bit de MODO_CONFIGURAR_TEMPORIZADOR
 BCF MODO, 2 ; Desactivar bit de MODO_TEMPORIZADOR
 BSF DISPLAY_EDIT, 0

 BTFSC PORTB, 3 ; ANTIREBOTE - BOTÓN 2 - INICIAR/DETENER
 GOTO $+6
 BTFSC BANDERA_T, 5 ; Verificar bandera de habilitación de decremento
 GOTO $+3
 BSF BANDERA_T, 5 ; Habilitar decremento
 GOTO $+2
 BCF BANDERA_T, 5 ; Deshabilitar decremento

 BTFSC PORTB, 0 ; ANTIREBOTE - BOTÓN 0 - DETENER ALARMA
 GOTO $+7
 BTFSS BANDERA_T, 6 ; Verificar bandera de habilitación de decremento
 GOTO $+5
 BCF BANDERA_T, 6
 BCF PORTA, 5
 MOVLW 0
 MOVWF DURACION

 BCF ((INTCON) and 07Fh), 0 ; Limpiamos bandera de interrupción
 CLRF BANDERA_M ; Limpieza del registro BANDERA_M
 BSF BANDERA_M, 2 ; Activación del bit 2 del registro BANDERA_M
 BCF PORTA, 0 ; Apagar bit 0 del PORTA (Salida de LEDS)
 BCF PORTA, 1 ; Apagar bit 1 del PORTA (Salida de LEDS)
 BSF PORTA, 2 ; Encender bit 2 del PORTA (Salida de LEDS)
 BCF PORTA, 3 ; Apagar bit 3 del PORTA (Salida de LEDS)
 BCF PORTA, 4 ; Apagar bit 4 del PORTA (Salida de LEDS)
    RETURN
    MODO_CRONOMETRO:
 BTFSC PORTB, 4 ; ANTIREBOTE - BOTÓN 4 - CAMBIO DE MODO
 GOTO $+3
 BSF MODO, 0 ; Activar bit de MODO_HORA
 BCF MODO, 3 ; Desactivar bit de MODO_CRONOMETRO
 BTFSC PORTB, 3 ; Verificación del bit 3 del PORTB (Boton de inicio)
 GOTO $+6
 BTFSC BANDERA_C, 0
 GOTO $+3
 BSF BANDERA_C, 0
 GOTO $+2
 BCF BANDERA_C, 0
 BTFSC PORTB, 2 ; ANTIREBOTE - BOTÓN 2 - REINICIO
 GOTO $+10
 BTFSC BANDERA_C, 0
 GOTO $+8
 MOVLW 0
 MOVWF CONT_CRONO ; Limpieza del contador del cronómetro
 MOVWF CONT_CRONO+1
 MOVWF CONT_CRONO+2
 MOVWF CONT_CRONO+3
 MOVWF CONT_CRONO+4
 MOVWF CONT_CRONO+5
 BCF ((INTCON) and 07Fh), 0 ; Limpiamos bandera de interrupción
 CLRF BANDERA_M ; Limpieza del registro BANDERA_M
 BSF BANDERA_M, 3 ; Activación del bit 4 del registro BANDERA_M
 BCF PORTA, 0 ; Apagar bit 0 del PORTA (Salida de LEDS)
 BCF PORTA, 1 ; Apagar bit 1 del PORTA (Salida de LEDS)
 BCF PORTA, 2 ; Apagar bit 2 del PORTA (Salida de LEDS)
 BSF PORTA, 3 ; Apagar bit 3 del PORTA (Salida de LEDS)
 BCF PORTA, 4 ; Apagar bit 4 del PORTA (Salida de LEDS)
    RETURN

    MODO_CONFIGURACION_HORA:
 BTFSC PORTB, 0 ; ANTIREBOTE - BOTÓN 0 - UP
 GOTO $+2
 BSF BANDERA_H, 0
 BTFSC PORTB, 1 ; ANTIREBOTE - BOTÓN 1 - DOWN
 GOTO $+2
 BSF BANDERA_H, 1
 BTFSC PORTB, 2 ; ANTIREBOTE - BOTÓN 2 - ACEPTAR
 GOTO $+2
 INCF DISPLAY_EDIT
 BCF ((INTCON) and 07Fh), 0 ; Limpiamos bandera de interrupción
        CLRF BANDERA_M ; Limpieza del registro BANDERA_M
 BSF BANDERA_M, 4 ; Activación del bit 5 del registro BANDERA_M
 BSF PORTA, 4 ; Encender bit 5 del PORTA (Salida de LEDS)
    RETURN

    MODO_CONFIGURACION_FECHA:
 BTFSC PORTB, 0 ; ANTIREBOTE - BOTÓN 0 - UP
 GOTO $+2
 BSF BANDERA_F, 0
 BTFSC PORTB, 1 ; ANTIREBOTE - BOTÓN 1 - DOWN
 GOTO $+2
 BSF BANDERA_F, 1
 BTFSC PORTB, 2 ; ANTIREBOTE - BOTÓN 2 - ACEPTAR
 GOTO $+2
 INCF DISPLAY_EDIT
 BCF ((INTCON) and 07Fh), 0 ; Limpiamos bandera de interrupción
        CLRF BANDERA_M ; Limpieza del registro BANDERA_M
 BSF BANDERA_M, 5 ; Activación del bit 6 del registro BANDERA_M
 BSF PORTA, 4 ; Encender bit 5 del PORTA (Salida de LEDS)
    RETURN

    MODO_CONFIGURACION_TEMPORIZADOR:
 BTFSC PORTB, 0 ; ANTIREBOTE - BOTÓN 0 - UP
 GOTO $+2
 BSF BANDERA_T, 0
 BTFSC PORTB, 1 ; ANTIREBOTE - BOTÓN 1 - DOWN
 GOTO $+2
 BSF BANDERA_T, 1
 BTFSC PORTB, 2 ; ANTIREBOTE - BOTÓN 2 - ACEPTAR
 GOTO $+2
 INCF DISPLAY_EDIT
 BCF ((INTCON) and 07Fh), 0 ; Limpiamos bandera de interrupción
        CLRF BANDERA_M ; Limpieza del registro BANDERA_M
 BSF BANDERA_M, 6 ; Activación del bit 7 del registro BANDERA_M
 BSF PORTA, 4 ; Encender bit 5 del PORTA (Salida de LEDS)
    RETURN

    ;--------------------- SUBRUTINAS DE INTERRUPCIONES ------------------------
    INT_TMR0: ; SUBRUTINA DE INTERRUPCIÓN DEL TIMER0
 RESET_TIMER0 254 ; Ingreso a Macro con valor 254 para configurar retardo de 2 ms
 CALL MOSTRAR ; Subrutina que muestra los valores en los displays (cada 2 ms)
 RETURN

    INT_TMR1: ; SUBRUTINA DE INTERRUPCIÓN DEL TIMER1
 BTFSS BANDERA_M, 4 ; Verificación de bandera de modo CONFIGURAR_HORA
 INCF CONT_HORA ; Incremento del contador hora (cada 1s)
 BTFSC BANDERA_T, 5 ; Verificación de bandera de modo TEMPORIZADOR
 DECF CONT_TEMP ; Decremento del contador temporizador (cada 1s)
 BTFSC BANDERA_C, 0 ; Verificación de bandera de modo CRONOMETRO
 INCF CONT_CRONO ; Incremento del contador cronómetro (cada 1s)

 BTFSS BANDERA_T, 6 ; Verificación de bandera de modo TEMPORIZADOR
 GOTO $+7
 BSF PORTA, 5
 INCF DURACION
 BCF ((STATUS) and 07Fh), 2
 MOVLW 61
 SUBWF DURACION, W
 BTFSS ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF BANDERA_T, 6
 BCF PORTA, 5
 MOVLW 0
 MOVWF DURACION


 RESET_TIMER1 0xC2, 0xF7 ; Macro para configurar el TIMER1 (Retardo cada segundo)
 RETURN

    INT_TMR2: ; SUBRUTINA DE INTERRUPCIÓN DEL TIMER2
 BCF ((PIR1) and 07Fh), 1 ; Limpieza de la bandera de TMR2
 BTFSC PORTA, 6 ; Verificación de bit 6 del PORTA
 GOTO $+3
 BSF PORTA, 6 ; Activación de bit 6 del PORTA
 GOTO $+2
 BCF PORTA, 6 ; Desactivación de bit 6 del PORTA
 RETURN

    INT_B: ; SUBRUTINA DE INTERRUPCIÓN POR CAMBIO DEL PORTB
 BTFSC MODO, 0 ; Verificar indicador de MODO HORA
 GOTO MODO_HORA ; Direccionamiento
 BTFSC MODO, 1 ; Verificar indicador de MODO FECHA
 GOTO MODO_FECHA ; Direccionamiento
 BTFSC MODO, 2 ; Verificar indicador de MODO TEMPORIZADOR
 GOTO MODO_TEMPORIZADOR ; Direccionamiento
 BTFSC MODO, 3 ; Verificar indicador de MODO CONFIGURACIÓN HORA
 GOTO MODO_CRONOMETRO ; Direccionamiento
 BTFSC MODO, 4 ; Verificar indicador de MODO CONFIGURACIÓN HORA
 GOTO MODO_CONFIGURACION_HORA ; Direccionamiento
 BTFSC MODO, 5 ; Verificar indicador de MODO CONFIGURACIÓN FECHA
 GOTO MODO_CONFIGURACION_FECHA ; Direccionamiento
 BTFSC MODO, 6 ; Verificar indicador de MODO CONFIGURACIÓN TEMPORIZADOR
 GOTO MODO_CONFIGURACION_TEMPORIZADOR ; Direccionamiento
 BCF ((INTCON) and 07Fh), 0 ; Limpiar la bandera de cambio del PORTB
 RETURN

    ;---------------- SUBRUTINAS DE CONFIGURACIÓN DE DIPLAYS -------------------
    EDICION_RELOJ:
 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 1 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_H, 0 ; Control de overflow en segundos
 INCF CONT_HORA
 CALL OVERFLOW_SEGUNDOS
 BCF BANDERA_H, 0
 BTFSC BANDERA_H, 1 ; Control de underflow en segundos
 DECF CONT_HORA
 CALL UNDERFLOW_SEGUNDOS
 BCF BANDERA_H, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 2 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_H, 0 ; Control de overflow en minutos
 INCF CONT_HORA+2
 CALL OVERFLOW_MINUTOS
 BCF BANDERA_H, 0
 BTFSC BANDERA_H, 1 ; Control de underflow en minutos
 DECF CONT_HORA+2
 CALL UNDERFLOW_MINUTOS
 BCF BANDERA_H, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 3 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_H, 0 ; Control de overflow en horas
 INCF CONT_HORA+4
 CALL OVERFLOW_HORAS
 BCF BANDERA_H, 0
 BTFSC BANDERA_H, 1 ; Control de undeflow en horas
 DECF CONT_HORA+4
 CALL UNDERFLOW_HORAS
 BCF BANDERA_H, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 4 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+4
 BSF MODO, 0 ; Activar bit de MODO_HORA
 BCF MODO, 4 ; Desactivar bit de MODO_CONFIGURACION_HORA
 CLRF DISPLAY_EDIT
 RETURN

    EDICION_FECHA:
 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 1 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_F, 0 ; Control de overflow en años
 INCF CONT_FECHA
 CALL OVERFLOW_ANUAL
 BCF BANDERA_F, 0
 BTFSC BANDERA_F, 1 ; Control de underflow en años
 DECF CONT_FECHA
 CALL UNDERFLOW_ANUAL
 BCF BANDERA_F, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 2 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_F, 0 ; Control de overflow en meses
 INCF CONT_FECHA+2
 CALL OVERFLOW_MESES
 BCF BANDERA_F, 0
 BTFSC BANDERA_F, 1 ; Control de underflow en meses
 DECF CONT_FECHA+2
 CALL UNDERFLOW_MESES
 BCF BANDERA_F, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 3 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_F, 0 ; Control de overflow en días
 INCF CONT_FECHA+4
 CALL OVERFLOW_DIAS
 BCF BANDERA_F, 0
 BTFSC BANDERA_F, 1 ; Control de underflow en días
 DECF CONT_FECHA+4
 CALL UNDERFLOW_DIAS
 BCF BANDERA_F, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 4 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+4
 BSF MODO, 1 ; Activar bit de MODO_FECHA
 BCF MODO, 5 ; Desactivar bit de MODO_CONFIGURACION_FECHA
 CLRF DISPLAY_EDIT
 RETURN

    EDICION_TEMPORIZADOR:
 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 1 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_T, 0 ; Control de overflow en segundos para temporizador
 INCF CONT_TEMP
 CALL OVERFLOW_SEGUNDOS_T
 BCF BANDERA_T, 0
 BTFSC BANDERA_T, 1 ; Control de underflow en segundos para temporizador
 DECF CONT_TEMP
 CALL UNDERFLOW_SEGUNDOS_T
 BCF BANDERA_T, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 2 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_T, 0 ; Control de overflow en minutos para temporizador
 INCF CONT_TEMP+2
 CALL OVERFLOW_MINUTOS_T
 BCF BANDERA_T, 0
 BTFSC BANDERA_T, 1 ; Control de underflow en minutos para temporizador
 DECF CONT_TEMP+2
 CALL UNDERFLOW_MINUTOS_T
 BCF BANDERA_T, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 3 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+9
 BTFSC BANDERA_T, 0 ; Control de overflow en horas para temporizador
 INCF CONT_TEMP+4
 CALL OVERFLOW_HORAS_T
 BCF BANDERA_T, 0
 BTFSC BANDERA_T, 1 ; Control de undeflow en horas para temporizador
 DECF CONT_TEMP+4
 CALL UNDERFLOW_HORAS_T
 BCF BANDERA_T, 1

 BCF ((STATUS) and 07Fh), 2 ; Reseteo de bandera ((STATUS) and 07Fh), 2
 MOVLW 4 ; Verificación de indicador de display
 SUBWF DISPLAY_EDIT, W ;
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+4
 BSF MODO, 2 ; Activar bit de MODO_TEMPORIZADOR
 BCF MODO, 6 ; Desactivar bit de MODO_CONFIGURACION_TEMPORIZADOR
 CLRF DISPLAY_EDIT
 RETURN

    DIVISION_HORA: ; Subrutina de control de overlflow en conteo de modo HORA
 CALL OVERFLOW_SEGUNDOS
 CALL OVERFLOW_MINUTOS
 CALL OVERFLOW_HORAS
 RETURN
    DIVISION_FECHA: ; Subrutina de control de overlflow en conteo de modo FECHA
 CALL OVERFLOW_DIAS
 CALL OVERFLOW_MESES
 CALL OVERFLOW_ANUAL
 RETURN
    DIVISION_CRONOMETRO: ; Subrutina de control de overlflow en conteo de modo CRONOMETRO
 CALL OVERFLOW_SEGUNDOS_C
 CALL OVERFLOW_MINUTOS_C
 CALL OVERFLOW_HORAS_C
 RETURN
    DIVISION_TEMPORIZADOR: ; Subrutina de control de underflow en conteo de modo TEMPORIZADOR
 CALL UNDERFLOW_SEGUNDOS_T
 CALL UNDERFLOW_MINUTOS_T
 CALL UNDERFLOW_HORAS_T
 RETURN

    OVERFLOW_DIAS:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+3
 INCF CONT_FECHA+5 ; Incrementar variable de decenas de segundos
 CLRF CONT_FECHA+4 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 ; SI ES FEBRERO (28 DÍAS)
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 2 ; Colocar el valor de 2 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 2 ; Colocar el valor de 2 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 9 ; Colocar el valor de 9 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+7
 CLRF CONT_FECHA+4 ; Reiniciar variable de unidades de segundos
 CLRF CONT_FECHA+5
 INCF CONT_FECHA+4 ; Incrementar variable de decenas de segundos
 BTFSS BANDERA_M, 5
 INCF CONT_FECHA+2
 RETURN

 ; SI ES ABRIL, JUNIO, SEPTIEMBRE O NOVIEMBRE (30 DÍAS)
 ; ABRIL
 BCF ((STATUS) and 07Fh), 2
 MOVLW 4 ; Colocar el valor de 4 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 3 ; Colocar el valor de 3 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+7
 CLRF CONT_FECHA+4 ; Reiniciar variable de unidades de segundos
 CLRF CONT_FECHA+5
 INCF CONT_FECHA+4 ; Incrementar variable de decenas de segundos
 BTFSS BANDERA_M, 5
 INCF CONT_FECHA+2 ; Incrementar variable de decenas de segundos
 RETURN
 ; JUNIO
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 3 ; Colocar el valor de 3 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+7
 CLRF CONT_FECHA+4 ; Reiniciar variable de unidades de segundos
 CLRF CONT_FECHA+5
 INCF CONT_FECHA+4 ; Incrementar variable de decenas de segundos
 BTFSS BANDERA_M, 5
 INCF CONT_FECHA+2 ; Incrementar variable de decenas de segundos
 RETURN
 ; SEPTIEMBRE
 BCF ((STATUS) and 07Fh), 2
 MOVLW 9 ; Colocar el valor de 9 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 3 ; Colocar el valor de 3 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+7
 CLRF CONT_FECHA+4 ; Reiniciar variable de unidades de segundos
 CLRF CONT_FECHA+5
 INCF CONT_FECHA+4 ; Incrementar variable de decenas de segundos
 BTFSS BANDERA_M, 5
 INCF CONT_FECHA+2 ; Incrementar variable de decenas de segundos
 RETURN
 ;NOVIEMBRE
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 3 ; Colocar el valor de 3 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+7
 CLRF CONT_FECHA+4 ; Reiniciar variable de unidades de segundos
 CLRF CONT_FECHA+5
 INCF CONT_FECHA+4 ; Incrementar variable de decenas de segundos
 BTFSS BANDERA_M, 5
 INCF CONT_FECHA+2 ; Incrementar variable de decenas de segundos
 RETURN
 ; SI ES CUALQUIER OTRO MES (31 DÍAS)
 BCF ((STATUS) and 07Fh), 2
 MOVLW 3 ; Colocar el valor de 3 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 2 ; Colocar el valor de 2 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 RETURN
 CLRF CONT_FECHA+4 ; Reiniciar variable de unidades de segundos
 CLRF CONT_FECHA+5
 INCF CONT_FECHA+4 ; Incrementar variable de decenas de segundos
 BTFSS BANDERA_M, 5
 INCF CONT_FECHA+2 ; Incrementar variable de decenas de segundos
 RETURN

    UNDERFLOW_DIAS:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+4
 DECF CONT_FECHA+5 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_FECHA+4

 ; OVERFLOW DECENAS
 ; SI ES FEBRERO (28 DÍAS)
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 2 ; Colocar el valor de 2 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+6
 MOVLW 2
 MOVWF CONT_FECHA+5
 MOVLW 8
 MOVWF CONT_FECHA+4
 RETURN
 ; SI ES ABRIL, JUNIO, SEPTIEMBRE O NOVIEMBRE (30 DÍAS)
 ; ABRIL
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 4 ; Colocar el valor de 4 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+6
 MOVLW 3
 MOVWF CONT_FECHA+5
 MOVLW 0
 MOVWF CONT_FECHA+4
 RETURN
 ; JUNIO
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+6
 MOVLW 3
 MOVWF CONT_FECHA+5
 MOVLW 0
 MOVWF CONT_FECHA+4
 RETURN
 ; SEPTIEMBRE
 BCF ((STATUS) and 07Fh), 2
 MOVLW 9 ; Colocar el valor de 9 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+6
 MOVLW 3
 MOVWF CONT_FECHA+5
 MOVLW 0
 MOVWF CONT_FECHA+4
 RETURN
 ;NOVIEMBRE
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+6
 MOVLW 3
 MOVWF CONT_FECHA+5
 MOVLW 0
 MOVWF CONT_FECHA+4
 RETURN
 ; SI ES CUALQUIER OTRO MES (31 DÍAS)
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 MOVLW 3
 MOVWF CONT_FECHA+5
 MOVLW 1
 MOVWF CONT_FECHA+4
 RETURN

    UNDERFLOW_MESES:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+4
 DECF CONT_FECHA+3 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_FECHA+2
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_FECHA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 MOVLW 1
 MOVWF CONT_FECHA+3
 MOVLW 2
 MOVWF CONT_FECHA+2
 RETURN

    UNDERFLOW_ANUAL:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_FECHA, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 DECF CONT_FECHA+1 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_FECHA
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_FECHA+1, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 MOVLW 9
 MOVWF CONT_FECHA+1
 RETURN
 RETURN

    OVERFLOW_MESES:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+3
 INCF CONT_FECHA+3 ; Incrementar variable de decenas de segundos
 CLRF CONT_FECHA+2 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 1 ; Colocar el valor de 1 en W
 SUBWF CONT_FECHA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 BCF ((STATUS) and 07Fh), 2
 MOVLW 3 ; Colocar el valor de 3 en W
 SUBWF CONT_FECHA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_FECHA+2 ; Reiniciar variable de unidades de segundos
 BSF CONT_FECHA+2, 0
 CLRF CONT_FECHA+3 ; Reiniciar variable de unidades de segundos
 BTFSS BANDERA_M, 5
 INCF CONT_FECHA ; Incrementar variable de decenas de segundos
 RETURN

    OVERFLOW_ANUAL:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_FECHA, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_FECHA+1 ; Incrementar variable de decenas de segundos
 CLRF CONT_FECHA ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_FECHA+1, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_FECHA+1 ; Incrementar variable de decenas de segundos
 CLRF CONT_FECHA ; Reiniciar variable de unidades de segundos
 RETURN

    ; CONFIGURACIÓN DE DISPLAYS DEL RELOJ
    OVERFLOW_SEGUNDOS:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_HORA, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_HORA+1 ; Incrementar variable de decenas de segundos
 CLRF CONT_HORA ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_HORA+1, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_HORA+1 ; Reiniciar variable de unidades de segundos
 BTFSS BANDERA_M, 4 ; Verificamos bandera 4
 INCF CONT_HORA+2 ; Incrementar variable de decenas de segundos
 RETURN

    UNDERFLOW_SEGUNDOS:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_HORA, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 DECF CONT_HORA+1 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_HORA
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_HORA+1, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 MOVLW 5
 MOVWF CONT_HORA+1
 RETURN

    OVERFLOW_MINUTOS:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_HORA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_HORA+3 ; Incrementar variable de decenas de segundos
 CLRF CONT_HORA+2 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_HORA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_HORA+3 ; Reiniciar variable de unidades de segundos
 BTFSS BANDERA_M, 4 ; Verificamos bandera 4
 INCF CONT_HORA+4 ; Incrementar variable de decenas de segundos
 RETURN

    UNDERFLOW_MINUTOS:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_HORA+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 DECF CONT_HORA+3 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_HORA+2
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_HORA+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 MOVLW 5
 MOVWF CONT_HORA+3
 RETURN

    OVERFLOW_HORAS:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_HORA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+3
 INCF CONT_HORA+5 ; Incrementar variable de decenas de segundos
 CLRF CONT_HORA+4 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 2 ; Colocar el valor de 2 en W
 SUBWF CONT_HORA+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 BCF ((STATUS) and 07Fh), 2
 MOVLW 4 ; Colocar el valor de 4 en W
 SUBWF CONT_HORA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_HORA+4
 CLRF CONT_HORA+5 ; Reiniciar variable de unidades de segundos
 BTFSS BANDERA_M, 4 ; Verificamos bandera 4
 INCF CONT_FECHA+4
 RETURN

    UNDERFLOW_HORAS:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_HORA+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 0 ; Colocar el valor de 0 en W
 SUBWF CONT_HORA+5, W ; Restar a contador para verficar
 BTFSC ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+5
 MOVLW 9
 MOVWF CONT_HORA+4
 DECF CONT_HORA+5
 return
 MOVLW 3
 MOVWF CONT_HORA+4
 MOVLW 2
 MOVWF CONT_HORA+5
 RETURN

    ; CONFIGURACIÓN DE DISPLAYS DEL TEMPORIZADOR
    OVERFLOW_SEGUNDOS_T:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_TEMP, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_TEMP+1 ; Incrementar variable de decenas de segundos
 CLRF CONT_TEMP ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_TEMP+1, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_TEMP+1 ; Reiniciar variable de unidades de segundos
 RETURN

    UNDERFLOW_SEGUNDOS_T:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_TEMP, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 DECF CONT_TEMP+1 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_TEMP
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_TEMP+1, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 MOVLW 5
 MOVWF CONT_TEMP+1
 BTFSS BANDERA_M, 6 ; Verificamos bandera 4
 DECF CONT_TEMP+2 ; Incrementar variable de decenas de segundos
 RETURN

    OVERFLOW_MINUTOS_T:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_TEMP+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_TEMP+3 ; Incrementar variable de decenas de segundos
 CLRF CONT_TEMP+2 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_TEMP+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_TEMP+3 ; Reiniciar variable de unidades de segundos
 RETURN

    UNDERFLOW_MINUTOS_T:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_TEMP+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 DECF CONT_TEMP+3 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_TEMP+2
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_TEMP+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 MOVLW 5
 MOVWF CONT_TEMP+3
 BTFSS BANDERA_M, 6 ; Verificamos bandera 4
 DECF CONT_TEMP+4 ; Incrementar variable de decenas de segundos
 RETURN

    OVERFLOW_HORAS_T:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_TEMP+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_TEMP+5 ; Incrementar variable de decenas de segundos
 CLRF CONT_TEMP+4 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 6 en W
 SUBWF CONT_TEMP+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_TEMP+5 ; Reiniciar variable de unidades de segundos
 RETURN

    UNDERFLOW_HORAS_T:
 ; UNDERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_TEMP+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 DECF CONT_TEMP+5 ; Incrementar variable de decenas de segundos
 MOVLW 9
 MOVWF CONT_TEMP+4
 ; UNDERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW -1 ; Colocar el valor de -1 en W
 SUBWF CONT_TEMP+5, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 MOVLW 9
 MOVWF CONT_TEMP+5
 BTFSC BANDERA_M, 6 ; Verificamos bandera 6
 GOTO $+10
 BCF BANDERA_T, 5
 INCF CONT_TEMP
 CALL OVERFLOW_SEGUNDOS_T
 INCF CONT_TEMP+2
 CALL OVERFLOW_MINUTOS_T
 INCF CONT_TEMP+4
 CALL OVERFLOW_HORAS_T
 BSF BANDERA_T, 6
 BCF BANDERA_T, 5
 RETURN

    OVERFLOW_SEGUNDOS_C:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_CRONO, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_CRONO+1 ; Incrementar variable de decenas de segundos
 CLRF CONT_CRONO ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_CRONO+1, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_CRONO+1 ; Reiniciar variable de unidades de segundos
 INCF CONT_CRONO+2 ; Incrementar variable de decenas de segundos
 RETURN

    OVERFLOW_MINUTOS_C:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_CRONO+2, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 INCF CONT_CRONO+3 ; Incrementar variable de decenas de segundos
 CLRF CONT_CRONO+2 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 6 ; Colocar el valor de 6 en W
 SUBWF CONT_CRONO+3, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_CRONO+3 ; Reiniciar variable de unidades de segundos
 INCF CONT_CRONO+4 ; Incrementar variable de decenas de segundos
 RETURN

    OVERFLOW_HORAS_C:
 ; OVERFLOW UNIDADES
 BCF ((STATUS) and 07Fh), 2
 MOVLW 10 ; Colocar el valor de 10 en W
 SUBWF CONT_CRONO+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 GOTO $+3
 INCF CONT_CRONO+5 ; Incrementar variable de decenas de segundos
 CLRF CONT_CRONO+4 ; Reiniciar variable de unidades de segundos
 ; OVERFLOW DECENAS
 BCF ((STATUS) and 07Fh), 2
 MOVLW 2 ; Colocar el valor de 2 en W
 SUBWF CONT_CRONO+5, W ;; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 BCF ((STATUS) and 07Fh), 2
 MOVLW 4 ; Colocar el valor de 4 en W
 SUBWF CONT_CRONO+4, W ; Restar a contador para verficar
 BTFSS ((STATUS) and 07Fh), 2 ; Verificar bandera de ((STATUS) and 07Fh), 2
 return
 CLRF CONT_CRONO+4
 CLRF CONT_CRONO+5 ; Reiniciar variable de unidades de segundos
 RETURN

    PREPARAR:
 MOVF VALOR, W ; Colocamos el valor de NIBBLES (posición 0) en W
 CALL TABLA ; Transformamos el valor a enviar a display
 MOVWF DISPLAY ; Guardamos en variable DISPLAY
 MOVF VALOR+1, W ; Colocamos el valor de NIBBLES (posición 1) en W
 CALL TABLA ; Transformamos el valor a enviar a display
 MOVWF DISPLAY+1 ; Guardamos en variable DISPLAY+1
 MOVF VALOR+2, W ; Colocamos el valor de NIBBLES (posición 0) en W
 CALL TABLA ; Transformamos el valor a enviar a display
 MOVWF DISPLAY+2 ; Guardamos en variable DISPLAY2
 MOVF VALOR+3, W ; Colocamos el valor de NIBBLES (posición 1 en W
 CALL TABLA ; Transformamos el valor a enviar a display
 MOVWF DISPLAY+3 ; Guardamos en variable DISPLAY2+1
 MOVF VALOR+4, W ; Colocamos el valor de NIBBLES (posición 0) en W
 CALL TABLA ; Transformamos el valor a enviar a display
 MOVWF DISPLAY+4 ; Guardamos en variable DISPLAY2
 MOVF VALOR+5, W ; Colocamos el valor de NIBBLES (posición 1 en W
 CALL TABLA ; Transformamos el valor a enviar a display
 MOVWF DISPLAY+5 ; Guardamos en variable DISPLAY2+1
 RETURN

    MOSTRAR:
 CLRF PORTD
 ; Lógica de condicionales para verificar que display encender cada 2 ms
 BTFSC BANDERA_D, 0 ; Verificamos bandera 2
 GOTO DISPLAY_0
 BTFSC BANDERA_D, 1 ; Verificamos bandera 1
 GOTO DISPLAY_1
 BTFSC BANDERA_D, 2 ; Verificamos bandera 2
 GOTO DISPLAY_2
 BTFSC BANDERA_D, 3 ; Verificamos bandera 3
 GOTO DISPLAY_3
 BTFSC BANDERA_D, 4 ; Verificamos bandera 4
 GOTO DISPLAY_4
 BTFSC BANDERA_D, 5 ; Verificamos bandera 5
 GOTO DISPLAY_5
 DISPLAY_0:
     MOVF DISPLAY, W ; Colocamos el valor de variable DISPLAY en W
     MOVWF PORTC ; Colocamos el valor de W en Puerto C
     BSF PORTD, 0 ; Activamos el primer display
     BCF BANDERA_D, 0
     BSF BANDERA_D, 1
 RETURN
 DISPLAY_1:
     MOVF DISPLAY+1, W ; Colocamos el valor de variable DISPLAY en W
     MOVWF PORTC ; Colocamos el valor de W en Puerto C
     BSF PORTD, 1 ; Activamos el segundo display
     BCF BANDERA_D, 1
     BSF BANDERA_D, 2
 RETURN
 DISPLAY_2:
     MOVF DISPLAY+2, W ; Colocamos el valor de variable DISPLAY en W
     MOVWF PORTC ; Colocamos el valor de W en Puerto D
     BSF PORTD, 2 ; Activamos el primer display
     BCF BANDERA_D, 2
     BSF BANDERA_D, 3
 RETURN
 DISPLAY_3:
     MOVF DISPLAY+3, W ; Colocamos el valor de variable DISPLAY en W
     MOVWF PORTC ; Colocamos el valor de W en Puerto D
     BSF PORTD, 3 ; Activamos el segundo display
     BCF BANDERA_D, 3
     BSF BANDERA_D, 4
 RETURN
 DISPLAY_4:
     MOVF DISPLAY+4, W ; Colocamos el valor de variable DISPLAY en W
     ;XORLW 0xFF
     MOVWF PORTC ; Colocamos el valor de W en Puerto D
     BSF PORTD, 4 ; Activamos el primer display
     BCF BANDERA_D, 4
     BSF BANDERA_D, 5
 RETURN
 DISPLAY_5:
     MOVF DISPLAY+5, W ; Colocamos el valor de variable DISPLAY en W
     ;XORLW 0xFF
     MOVWF PORTC ; Colocamos el valor de W en Puerto D
     BSF PORTD, 5 ; Activamos el segundo display
     BCF BANDERA_D, 5
     BSF BANDERA_D, 0
 RETURN

    ;--------------------- SUBRUTINAS DE CONFIGURACIÓN -------------------------
    CONFIG_TIMER0:
 BANKSEL OPTION_REG ; Redireccionamos de banco
 BCF ((OPTION_REG) and 07Fh), 5 ; Configuramos al timer0 como temporizador
 BCF ((OPTION_REG) and 07Fh), 3 ; Configurar el Prescaler para el timer0 (No para el Wathcdog timer)
 BSF ((OPTION_REG) and 07Fh), 2
 BSF ((OPTION_REG) and 07Fh), 1
 BCF ((OPTION_REG) and 07Fh), 0 ; PS<2:0> -> 110 (Prescaler 1:128)
 ; Cálculo del valor a ingresar al TIMER1 para que tenga retardo de 1.5 ms
 ; N = 256 - (Temp/(4 x Tosc x Presc))
 ; N = 256 - (2 ms/(4 x (1/500 kHz) x 128))
 ; N = 254
 RESET_TIMER0 254 ; Reiniciamos la bandera interrupción
 RETURN

    CONFIG_TIMER1:
 BANKSEL T1CON ; Direccionamos al banco correcto
 BCF ((T1CON) and 07Fh), 1 ; Activamos el uso de reloj interno
 BCF ((T1CON) and 07Fh), 3 ; Apagamos LP
 BSF ((T1CON) and 07Fh), 5 ; Prescaler 1:8
 BSF ((T1CON) and 07Fh), 4
 BCF ((T1CON) and 07Fh), 6 ; Mantenemos al TMR1 siempre contando
 BSF ((T1CON) and 07Fh), 0 ; Activamos al TMR1
 ; Cálculo del valor a ingresar al TIMER1 para que tenga retardo de 1 s
 ; N = 65536 - (Td/(Pre x Ti))
 ; N = 65536 - ((1)/(8 x (1/(500 kHz)/4)))
 ; N = 49911
 ; TMR1H: 11000010 = 0xC2
 ; TMR1L: 11110111 = 0xF7
 RESET_TIMER1 0xC2, 0xF7 ; Macro para configurar el TIMER1
 RETURN

    CONFIG_TIMER2:
     BANKSEL T2CON ; Direccionamos al banco correcto
 BSF ((T2CON) and 07Fh), 1 ; Prescaler 1:16
 BSF ((T2CON) and 07Fh), 0
 BSF ((T2CON) and 07Fh), 6 ; Postscaler 1:16
 BSF ((T2CON) and 07Fh), 5
 BSF ((T2CON) and 07Fh), 4
 BSF ((T2CON) and 07Fh), 3
 BSF ((T2CON) and 07Fh), 2 ; Activamos al TMR1
 ; Cálculo del valor a ingresar al TIMER2 para que tenga retardo de 500 ms
 ; PR2 = (Ttmr2)/(Pres*Postc*(4/Fosc))
 ; PR2 = (0.5)/(16*16*(4/500*10^3))
 ; PR2 = 244
 BANKSEL PR2 ; Direccionamos al banco correcto
 MOVLW 244 ; Valor necesario para retardo de 500 ms
 MOVWF PR2 ; Cargamos litaral al bit PR2
 RETURN

    CONFIG_CLK: ; Rutina de configuración de oscilador
 BANKSEL OSCCON
 BSF OSCCON, 0
 BSF OSCCON, 4
 BSF OSCCON, 5
 BCF OSCCON, 6 ; Oscilador con reloj de 500 kHz
 RETURN

    CONFIG_INT_PORTB:
 BANKSEL INTCON
 BSF ((INTCON) and 07Fh), 3 ;
 BCF ((INTCON) and 07Fh), 0 ; Limpieza de la bandera de interrupción por cambio ((INTCON) and 07Fh), 0
 BANKSEL IOCB
 BSF ((IOCB) and 07Fh), 0 ; Habilitamos int. por cambio de estado en ((PORTB) and 07Fh), 0
 BSF ((IOCB) and 07Fh), 1 ; Habilitamos int. por cambio de estado en ((PORTB) and 07Fh), 1
 BSF ((IOCB) and 07Fh), 2 ; Habilitamos int. por cambio de estado en ((PORTB) and 07Fh), 2
 BSF ((IOCB) and 07Fh), 3 ; Habilitamos int. por cambio de estado en ((PORTB) and 07Fh), 3
 BSF ((IOCB) and 07Fh), 4 ; Habilitamos int. por cambio de estado en ((PORTB) and 07Fh), 4
 BSF ((IOCB) and 07Fh), 5 ; Habilitamos int. por cambio de estado en ((PORTB) and 07Fh), 4
 RETURN

    CONIFG_INTERRUPT:
 BANKSEL INTCON ; Redireccionamos de banco
 BSF ((INTCON) and 07Fh), 7 ; Habilitamos a todas las interrupciones
 BSF ((INTCON) and 07Fh), 6 ; Habilitamos interrupciones en periféricos
 BSF ((INTCON) and 07Fh), 5 ; Habilitamos la interrupción del TMR0
 BCF ((INTCON) and 07Fh), 2 ; Limpieza de la bandera de TMR0
 BANKSEL PIE1 ; Redireccionamos de banco
 BSF ((PIE1) and 07Fh), 0 ; Habilitamos la interrupción del TMR1
 BSF ((PIE1) and 07Fh), 1 ; Habilitamos la interrupción del TMR2
 BANKSEL PIR1
 BCF ((PIR1) and 07Fh), 0 ; Limpieza de la bandera de TMR1
 BCF ((PIR1) and 07Fh), 1 ; Limpieza de la bandera de TMR2
 RETURN

    CONFIG_IO:
 BANKSEL ANSEL ; Direccionamos de banco
 CLRF ANSEL ; Configurar como digitales
 CLRF ANSELH ; Configurar como digitales
 BANKSEL TRISA ; Direccionamos de banco
 CLRF TRISA ; Habilitamos al PORTA como salida
 CLRF TRISC ; Habilitamos al PORTC como salida
 CLRF TRISD
 MOVLW 0xFF
 MOVWF TRISB
 BCF OPTION_REG, 7 ; Habilitar las resistencias pull-up (RPBU)
 BSF WPUB, 0 ; Habilita el registro de pull-up en ((PORTB) and 07Fh), 0
 BSF WPUB, 1 ; Habilita el registro de pull-up en ((PORTB) and 07Fh), 1
 BSF WPUB, 2 ; Habilita el registro de pull-up en ((PORTB) and 07Fh), 2
 BSF WPUB, 3 ; Habilita el registro de pull-up en ((PORTB) and 07Fh), 3
 BSF WPUB, 4 ; Habilita el registro de pull-up en ((PORTB) and 07Fh), 4
 BSF WPUB, 5 ; Habilita el registro de pull-up en ((PORTB) and 07Fh), 4
 BANKSEL PORTA ; Direccionar de banco
 CLRF PORTA ; Limpieza de PORTA
 CLRF PORTB ; Limpieza de PORTB
 CLRF PORTC ; Limpieza de PORTC
 CLRF PORTD ; Limpieza de PORTD
 RETURN

    LIMPIEZADEVARIABLES:
 CLRF BANDERA_D
 CLRF DISPLAY
 CLRF MODO
 CLRF BANDERA_M
 CLRF DISPLAY_EDIT
 CLRF BANDERA_H
 CLRF BANDERA_F
 CLRF BANDERA_T
 MOVLW 0
 MOVWF DURACION
 CLRF BANDERA_C
 RETURN
    ;------------------------------- TABLAS ------------------------------------
    ORG 50h
    TABLA:
 ANDLW 0x0F ; Limitar saltos a tamaño de la tabla
 ADDWF PCL ; Apuntamos el PC a caracter en ASCII de CONT
 RETLW 00111111B ; 0
 RETLW 00000110B ; 1
 RETLW 01011011B ; 2
 RETLW 01001111B ; 3
 RETLW 01100110B ; 4
 RETLW 01101101B ; 5
 RETLW 01111101B ; 6
 RETLW 00000111B ; 7
 RETLW 01111111B ; 8
 RETLW 01101111B ; 9
 RETLW 01110111B ; A
 RETLW 01111100B ; b
 RETLW 00111001B ; C
 RETLW 01011110B ; d
 RETLW 01111001B ; E
 RETLW 01110001B ; F
    END
